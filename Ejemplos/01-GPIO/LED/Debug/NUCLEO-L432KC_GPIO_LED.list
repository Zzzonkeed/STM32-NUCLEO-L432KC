
NUCLEO-L432KC_GPIO_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a30  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08001bbc  08001bbc  00011bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001c18  08001c18  00011c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001c20  08001c20  00011c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001c24  08001c24  00011c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08001c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000098  20000004  08001c2c  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000009c  08001c2c  0002009c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f82b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fd1  00000000  00000000  0002f85f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000382a  00000000  00000000  00031830  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000748  00000000  00000000  00035060  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000007f8  00000000  00000000  000357a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000405a  00000000  00000000  00035fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003036  00000000  00000000  00039ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003d030  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000011ac  00000000  00000000  0003d0ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000004 	.word	0x20000004
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001ba4 	.word	0x08001ba4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000008 	.word	0x20000008
 80001c8:	08001ba4 	.word	0x08001ba4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b97a 	b.w	80004d8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	468c      	mov	ip, r1
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	9e08      	ldr	r6, [sp, #32]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d151      	bne.n	80002b0 <__udivmoddi4+0xb4>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d96d      	bls.n	80002ee <__udivmoddi4+0xf2>
 8000212:	fab2 fe82 	clz	lr, r2
 8000216:	f1be 0f00 	cmp.w	lr, #0
 800021a:	d00b      	beq.n	8000234 <__udivmoddi4+0x38>
 800021c:	f1ce 0c20 	rsb	ip, lr, #32
 8000220:	fa01 f50e 	lsl.w	r5, r1, lr
 8000224:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000228:	fa02 f70e 	lsl.w	r7, r2, lr
 800022c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000230:	fa00 f40e 	lsl.w	r4, r0, lr
 8000234:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000238:	0c25      	lsrs	r5, r4, #16
 800023a:	fbbc f8fa 	udiv	r8, ip, sl
 800023e:	fa1f f987 	uxth.w	r9, r7
 8000242:	fb0a cc18 	mls	ip, sl, r8, ip
 8000246:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024a:	fb08 f309 	mul.w	r3, r8, r9
 800024e:	42ab      	cmp	r3, r5
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x6c>
 8000252:	19ed      	adds	r5, r5, r7
 8000254:	f108 32ff 	add.w	r2, r8, #4294967295
 8000258:	f080 8123 	bcs.w	80004a2 <__udivmoddi4+0x2a6>
 800025c:	42ab      	cmp	r3, r5
 800025e:	f240 8120 	bls.w	80004a2 <__udivmoddi4+0x2a6>
 8000262:	f1a8 0802 	sub.w	r8, r8, #2
 8000266:	443d      	add	r5, r7
 8000268:	1aed      	subs	r5, r5, r3
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000270:	fb0a 5510 	mls	r5, sl, r0, r5
 8000274:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000278:	fb00 f909 	mul.w	r9, r0, r9
 800027c:	45a1      	cmp	r9, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x98>
 8000280:	19e4      	adds	r4, r4, r7
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 810a 	bcs.w	800049e <__udivmoddi4+0x2a2>
 800028a:	45a1      	cmp	r9, r4
 800028c:	f240 8107 	bls.w	800049e <__udivmoddi4+0x2a2>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	eba4 0409 	sub.w	r4, r4, r9
 8000298:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800029c:	2100      	movs	r1, #0
 800029e:	2e00      	cmp	r6, #0
 80002a0:	d061      	beq.n	8000366 <__udivmoddi4+0x16a>
 80002a2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a6:	2300      	movs	r3, #0
 80002a8:	6034      	str	r4, [r6, #0]
 80002aa:	6073      	str	r3, [r6, #4]
 80002ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d907      	bls.n	80002c4 <__udivmoddi4+0xc8>
 80002b4:	2e00      	cmp	r6, #0
 80002b6:	d054      	beq.n	8000362 <__udivmoddi4+0x166>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e886 0021 	stmia.w	r6, {r0, r5}
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	f040 808e 	bne.w	80003ea <__udivmoddi4+0x1ee>
 80002ce:	42ab      	cmp	r3, r5
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xdc>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2d0>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb65 0503 	sbc.w	r5, r5, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	46ac      	mov	ip, r5
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d03f      	beq.n	8000366 <__udivmoddi4+0x16a>
 80002e6:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b912      	cbnz	r2, 80002f6 <__udivmoddi4+0xfa>
 80002f0:	2701      	movs	r7, #1
 80002f2:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f6:	fab7 fe87 	clz	lr, r7
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d134      	bne.n	800036a <__udivmoddi4+0x16e>
 8000300:	1beb      	subs	r3, r5, r7
 8000302:	0c3a      	lsrs	r2, r7, #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb3 f8f2 	udiv	r8, r3, r2
 800030e:	0c25      	lsrs	r5, r4, #16
 8000310:	fb02 3318 	mls	r3, r2, r8, r3
 8000314:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000318:	fb0c f308 	mul.w	r3, ip, r8
 800031c:	42ab      	cmp	r3, r5
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x134>
 8000320:	19ed      	adds	r5, r5, r7
 8000322:	f108 30ff 	add.w	r0, r8, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x132>
 8000328:	42ab      	cmp	r3, r5
 800032a:	f200 80d1 	bhi.w	80004d0 <__udivmoddi4+0x2d4>
 800032e:	4680      	mov	r8, r0
 8000330:	1aed      	subs	r5, r5, r3
 8000332:	b2a3      	uxth	r3, r4
 8000334:	fbb5 f0f2 	udiv	r0, r5, r2
 8000338:	fb02 5510 	mls	r5, r2, r0, r5
 800033c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000340:	fb0c fc00 	mul.w	ip, ip, r0
 8000344:	45a4      	cmp	ip, r4
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x15c>
 8000348:	19e4      	adds	r4, r4, r7
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x15a>
 8000350:	45a4      	cmp	ip, r4
 8000352:	f200 80b8 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000356:	4618      	mov	r0, r3
 8000358:	eba4 040c 	sub.w	r4, r4, ip
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	e79d      	b.n	800029e <__udivmoddi4+0xa2>
 8000362:	4631      	mov	r1, r6
 8000364:	4630      	mov	r0, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	f1ce 0420 	rsb	r4, lr, #32
 800036e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000372:	fa07 f70e 	lsl.w	r7, r7, lr
 8000376:	fa20 f804 	lsr.w	r8, r0, r4
 800037a:	0c3a      	lsrs	r2, r7, #16
 800037c:	fa25 f404 	lsr.w	r4, r5, r4
 8000380:	ea48 0803 	orr.w	r8, r8, r3
 8000384:	fbb4 f1f2 	udiv	r1, r4, r2
 8000388:	ea4f 4518 	mov.w	r5, r8, lsr #16
 800038c:	fb02 4411 	mls	r4, r2, r1, r4
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000398:	fb01 f30c 	mul.w	r3, r1, ip
 800039c:	42ab      	cmp	r3, r5
 800039e:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x1bc>
 80003a4:	19ed      	adds	r5, r5, r7
 80003a6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003aa:	f080 808a 	bcs.w	80004c2 <__udivmoddi4+0x2c6>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	f240 8087 	bls.w	80004c2 <__udivmoddi4+0x2c6>
 80003b4:	3902      	subs	r1, #2
 80003b6:	443d      	add	r5, r7
 80003b8:	1aeb      	subs	r3, r5, r3
 80003ba:	fa1f f588 	uxth.w	r5, r8
 80003be:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c2:	fb02 3310 	mls	r3, r2, r0, r3
 80003c6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ca:	fb00 f30c 	mul.w	r3, r0, ip
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1e6>
 80003d2:	19ed      	adds	r5, r5, r7
 80003d4:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d8:	d26f      	bcs.n	80004ba <__udivmoddi4+0x2be>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d96d      	bls.n	80004ba <__udivmoddi4+0x2be>
 80003de:	3802      	subs	r0, #2
 80003e0:	443d      	add	r5, r7
 80003e2:	1aeb      	subs	r3, r5, r3
 80003e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e8:	e78f      	b.n	800030a <__udivmoddi4+0x10e>
 80003ea:	f1c1 0720 	rsb	r7, r1, #32
 80003ee:	fa22 f807 	lsr.w	r8, r2, r7
 80003f2:	408b      	lsls	r3, r1
 80003f4:	fa05 f401 	lsl.w	r4, r5, r1
 80003f8:	ea48 0303 	orr.w	r3, r8, r3
 80003fc:	fa20 fe07 	lsr.w	lr, r0, r7
 8000400:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000404:	40fd      	lsrs	r5, r7
 8000406:	ea4e 0e04 	orr.w	lr, lr, r4
 800040a:	fbb5 f9fc 	udiv	r9, r5, ip
 800040e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000412:	fb0c 5519 	mls	r5, ip, r9, r5
 8000416:	fa1f f883 	uxth.w	r8, r3
 800041a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041e:	fb09 f408 	mul.w	r4, r9, r8
 8000422:	42ac      	cmp	r4, r5
 8000424:	fa02 f201 	lsl.w	r2, r2, r1
 8000428:	fa00 fa01 	lsl.w	sl, r0, r1
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x244>
 800042e:	18ed      	adds	r5, r5, r3
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	d243      	bcs.n	80004be <__udivmoddi4+0x2c2>
 8000436:	42ac      	cmp	r4, r5
 8000438:	d941      	bls.n	80004be <__udivmoddi4+0x2c2>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	441d      	add	r5, r3
 8000440:	1b2d      	subs	r5, r5, r4
 8000442:	fa1f fe8e 	uxth.w	lr, lr
 8000446:	fbb5 f0fc 	udiv	r0, r5, ip
 800044a:	fb0c 5510 	mls	r5, ip, r0, r5
 800044e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45a0      	cmp	r8, r4
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x26e>
 800045a:	18e4      	adds	r4, r4, r3
 800045c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000460:	d229      	bcs.n	80004b6 <__udivmoddi4+0x2ba>
 8000462:	45a0      	cmp	r8, r4
 8000464:	d927      	bls.n	80004b6 <__udivmoddi4+0x2ba>
 8000466:	3802      	subs	r0, #2
 8000468:	441c      	add	r4, r3
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba4 0408 	sub.w	r4, r4, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454c      	cmp	r4, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	464d      	mov	r5, r9
 800047c:	d315      	bcc.n	80004aa <__udivmoddi4+0x2ae>
 800047e:	d012      	beq.n	80004a6 <__udivmoddi4+0x2aa>
 8000480:	b156      	cbz	r6, 8000498 <__udivmoddi4+0x29c>
 8000482:	ebba 030e 	subs.w	r3, sl, lr
 8000486:	eb64 0405 	sbc.w	r4, r4, r5
 800048a:	fa04 f707 	lsl.w	r7, r4, r7
 800048e:	40cb      	lsrs	r3, r1
 8000490:	431f      	orrs	r7, r3
 8000492:	40cc      	lsrs	r4, r1
 8000494:	6037      	str	r7, [r6, #0]
 8000496:	6074      	str	r4, [r6, #4]
 8000498:	2100      	movs	r1, #0
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	4618      	mov	r0, r3
 80004a0:	e6f8      	b.n	8000294 <__udivmoddi4+0x98>
 80004a2:	4690      	mov	r8, r2
 80004a4:	e6e0      	b.n	8000268 <__udivmoddi4+0x6c>
 80004a6:	45c2      	cmp	sl, r8
 80004a8:	d2ea      	bcs.n	8000480 <__udivmoddi4+0x284>
 80004aa:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ae:	eb69 0503 	sbc.w	r5, r9, r3
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7e4      	b.n	8000480 <__udivmoddi4+0x284>
 80004b6:	4628      	mov	r0, r5
 80004b8:	e7d7      	b.n	800046a <__udivmoddi4+0x26e>
 80004ba:	4640      	mov	r0, r8
 80004bc:	e791      	b.n	80003e2 <__udivmoddi4+0x1e6>
 80004be:	4681      	mov	r9, r0
 80004c0:	e7be      	b.n	8000440 <__udivmoddi4+0x244>
 80004c2:	4601      	mov	r1, r0
 80004c4:	e778      	b.n	80003b8 <__udivmoddi4+0x1bc>
 80004c6:	3802      	subs	r0, #2
 80004c8:	443c      	add	r4, r7
 80004ca:	e745      	b.n	8000358 <__udivmoddi4+0x15c>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xe6>
 80004d0:	f1a8 0802 	sub.w	r8, r8, #2
 80004d4:	443d      	add	r5, r7
 80004d6:	e72b      	b.n	8000330 <__udivmoddi4+0x134>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004dc:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <HAL_InitTick+0x24>)
{
 80004e0:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80004e2:	6818      	ldr	r0, [r3, #0]
 80004e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80004ec:	f000 f878 	bl	80005e0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80004f0:	2200      	movs	r2, #0
 80004f2:	4621      	mov	r1, r4
 80004f4:	f04f 30ff 	mov.w	r0, #4294967295
 80004f8:	f000 f83e 	bl	8000578 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80004fc:	2000      	movs	r0, #0
 80004fe:	bd10      	pop	{r4, pc}
 8000500:	20000000 	.word	0x20000000

08000504 <HAL_Init>:
{
 8000504:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000506:	2003      	movs	r0, #3
 8000508:	f000 f824 	bl	8000554 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800050c:	2000      	movs	r0, #0
 800050e:	f7ff ffe5 	bl	80004dc <HAL_InitTick>
  HAL_MspInit();
 8000512:	f001 fa57 	bl	80019c4 <HAL_MspInit>
}
 8000516:	2000      	movs	r0, #0
 8000518:	bd08      	pop	{r3, pc}
	...

0800051c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800051c:	4a02      	ldr	r2, [pc, #8]	; (8000528 <HAL_IncTick+0xc>)
 800051e:	6813      	ldr	r3, [r2, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	6013      	str	r3, [r2, #0]
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	20000020 	.word	0x20000020

0800052c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetTick+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000020 	.word	0x20000020

08000538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000538:	b538      	push	{r3, r4, r5, lr}
 800053a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800053c:	f7ff fff6 	bl	800052c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000540:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000542:	4605      	mov	r5, r0
  {
    wait++;
 8000544:	bf18      	it	ne
 8000546:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000548:	f7ff fff0 	bl	800052c <HAL_GetTick>
 800054c:	1b40      	subs	r0, r0, r5
 800054e:	4284      	cmp	r4, r0
 8000550:	d8fa      	bhi.n	8000548 <HAL_Delay+0x10>
  {
  }
}
 8000552:	bd38      	pop	{r3, r4, r5, pc}

08000554 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000554:	4a07      	ldr	r2, [pc, #28]	; (8000574 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000556:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000558:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800055c:	041b      	lsls	r3, r3, #16
 800055e:	0c1b      	lsrs	r3, r3, #16
 8000560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000564:	0200      	lsls	r0, r0, #8
 8000566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800056e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000570:	60d3      	str	r3, [r2, #12]
 8000572:	4770      	bx	lr
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	68dc      	ldr	r4, [r3, #12]
 800057e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000582:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000586:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000588:	2b04      	cmp	r3, #4
 800058a:	bf28      	it	cs
 800058c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000590:	f04f 0501 	mov.w	r5, #1
 8000594:	fa05 f303 	lsl.w	r3, r5, r3
 8000598:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059c:	bf8c      	ite	hi
 800059e:	3c03      	subhi	r4, #3
 80005a0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a2:	4019      	ands	r1, r3
 80005a4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005a6:	fa05 f404 	lsl.w	r4, r5, r4
 80005aa:	3c01      	subs	r4, #1
 80005ac:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005ae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b0:	ea42 0201 	orr.w	r2, r2, r1
 80005b4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b8:	bfaf      	iteee	ge
 80005ba:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005be:	f000 000f 	andlt.w	r0, r0, #15
 80005c2:	4b06      	ldrlt	r3, [pc, #24]	; (80005dc <HAL_NVIC_SetPriority+0x64>)
 80005c4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c6:	bfa5      	ittet	ge
 80005c8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005cc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ce:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005d4:	bd30      	pop	{r4, r5, pc}
 80005d6:	bf00      	nop
 80005d8:	e000ed00 	.word	0xe000ed00
 80005dc:	e000ed14 	.word	0xe000ed14

080005e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005e0:	3801      	subs	r0, #1
 80005e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005e6:	d20a      	bcs.n	80005fe <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	4a07      	ldr	r2, [pc, #28]	; (8000608 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005ec:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ee:	21f0      	movs	r1, #240	; 0xf0
 80005f0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005f4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005f6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005f8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005fe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000e010 	.word	0xe000e010
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800060e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000610:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000612:	bf0c      	ite	eq
 8000614:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000618:	f022 0204 	bicne.w	r2, r2, #4
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	4770      	bx	lr
 8000620:	e000e010 	.word	0xe000e010

08000624 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000624:	4770      	bx	lr

08000626 <HAL_SYSTICK_IRQHandler>:
{
 8000626:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000628:	f7ff fffc 	bl	8000624 <HAL_SYSTICK_Callback>
 800062c:	bd08      	pop	{r3, pc}
	...

08000630 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000634:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000636:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000638:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8000794 <HAL_GPIO_Init+0x164>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800063c:	4a53      	ldr	r2, [pc, #332]	; (800078c <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 800063e:	9301      	str	r3, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000640:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00;
 8000644:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000646:	9c01      	ldr	r4, [sp, #4]
 8000648:	40dc      	lsrs	r4, r3
 800064a:	d102      	bne.n	8000652 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 800064c:	b005      	add	sp, #20
 800064e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000652:	2401      	movs	r4, #1
 8000654:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000658:	9c01      	ldr	r4, [sp, #4]
 800065a:	ea14 050a 	ands.w	r5, r4, sl
 800065e:	f000 808f 	beq.w	8000780 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000662:	684c      	ldr	r4, [r1, #4]
 8000664:	f024 0b10 	bic.w	fp, r4, #16
 8000668:	f1bb 0f02 	cmp.w	fp, #2
 800066c:	d111      	bne.n	8000692 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 800066e:	08df      	lsrs	r7, r3, #3
 8000670:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000674:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000678:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800067a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800067e:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000682:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000686:	690e      	ldr	r6, [r1, #16]
 8000688:	fa06 f60e 	lsl.w	r6, r6, lr
 800068c:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000690:	623e      	str	r6, [r7, #32]
 8000692:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000696:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000698:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800069a:	fa07 f70c 	lsl.w	r7, r7, ip
 800069e:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80006a0:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80006a4:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80006a6:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006aa:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80006ae:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006b2:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80006b6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006b8:	d811      	bhi.n	80006de <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80006ba:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80006bc:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 80006c0:	68ce      	ldr	r6, [r1, #12]
 80006c2:	fa06 fe0c 	lsl.w	lr, r6, ip
 80006c6:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80006ca:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80006cc:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80006ce:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80006d2:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80006d6:	409e      	lsls	r6, r3
 80006d8:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80006dc:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80006de:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80006e0:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80006e2:	688e      	ldr	r6, [r1, #8]
 80006e4:	fa06 f60c 	lsl.w	r6, r6, ip
 80006e8:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006ea:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80006ec:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006ee:	d547      	bpl.n	8000780 <HAL_GPIO_Init+0x150>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f0:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 80006f4:	f046 0601 	orr.w	r6, r6, #1
 80006f8:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 80006fc:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8000700:	f023 0703 	bic.w	r7, r3, #3
 8000704:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000708:	f006 0601 	and.w	r6, r6, #1
 800070c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000710:	9603      	str	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000712:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000718:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800071a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800071e:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000722:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000726:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800072a:	d02b      	beq.n	8000784 <HAL_GPIO_Init+0x154>
 800072c:	4e18      	ldr	r6, [pc, #96]	; (8000790 <HAL_GPIO_Init+0x160>)
 800072e:	42b0      	cmp	r0, r6
 8000730:	d02a      	beq.n	8000788 <HAL_GPIO_Init+0x158>
 8000732:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000736:	42b0      	cmp	r0, r6
 8000738:	bf14      	ite	ne
 800073a:	2607      	movne	r6, #7
 800073c:	2602      	moveq	r6, #2
 800073e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000742:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000746:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8000748:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800074a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800074c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000750:	bf0c      	ite	eq
 8000752:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000754:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8000756:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 8000758:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800075a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800075e:	bf0c      	ite	eq
 8000760:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000762:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000764:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 8000766:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000768:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800076c:	bf0c      	ite	eq
 800076e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000770:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8000772:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 8000774:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000776:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000778:	bf54      	ite	pl
 800077a:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800077c:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 800077e:	60d6      	str	r6, [r2, #12]
    position++;
 8000780:	3301      	adds	r3, #1
 8000782:	e760      	b.n	8000646 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000784:	2600      	movs	r6, #0
 8000786:	e7da      	b.n	800073e <HAL_GPIO_Init+0x10e>
 8000788:	2601      	movs	r6, #1
 800078a:	e7d8      	b.n	800073e <HAL_GPIO_Init+0x10e>
 800078c:	40010400 	.word	0x40010400
 8000790:	48000400 	.word	0x48000400
 8000794:	40021000 	.word	0x40021000

08000798 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000798:	b10a      	cbz	r2, 800079e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800079a:	6181      	str	r1, [r0, #24]
 800079c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800079e:	6281      	str	r1, [r0, #40]	; 0x28
 80007a0:	4770      	bx	lr
	...

080007a4 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 80007a4:	4a02      	ldr	r2, [pc, #8]	; (80007b0 <HAL_PWR_EnableBkUpAccess+0xc>)
 80007a6:	6813      	ldr	r3, [r2, #0]
 80007a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ac:	6013      	str	r3, [r2, #0]
 80007ae:	4770      	bx	lr
 80007b0:	40007000 	.word	0x40007000

080007b4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80007b4:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <HAL_PWREx_GetVoltageRange+0xc>)
 80007b6:	6818      	ldr	r0, [r3, #0]
#endif  
}
 80007b8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40007000 	.word	0x40007000

080007c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80007c4:	4b16      	ldr	r3, [pc, #88]	; (8000820 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007c6:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80007c8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007cc:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80007d0:	d11a      	bne.n	8000808 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007d2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80007d6:	d013      	beq.n	8000800 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d8:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80007da:	4912      	ldr	r1, [pc, #72]	; (8000824 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80007dc:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80007e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007e4:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80007e6:	4a10      	ldr	r2, [pc, #64]	; (8000828 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80007e8:	6812      	ldr	r2, [r2, #0]
 80007ea:	fbb2 f1f1 	udiv	r1, r2, r1
 80007ee:	2232      	movs	r2, #50	; 0x32
 80007f0:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 80007f2:	b112      	cbz	r2, 80007fa <HAL_PWREx_ControlVoltageScaling+0x36>
 80007f4:	6959      	ldr	r1, [r3, #20]
 80007f6:	0549      	lsls	r1, r1, #21
 80007f8:	d404      	bmi.n	8000804 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	055b      	lsls	r3, r3, #21
 80007fe:	d40d      	bmi.n	800081c <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8000800:	2000      	movs	r0, #0
 8000802:	4770      	bx	lr
        wait_loop_index--;
 8000804:	3a01      	subs	r2, #1
 8000806:	e7f4      	b.n	80007f2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000808:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800080c:	bf1f      	itttt	ne
 800080e:	681a      	ldrne	r2, [r3, #0]
 8000810:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000814:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000818:	601a      	strne	r2, [r3, #0]
 800081a:	e7f1      	b.n	8000800 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 800081c:	2003      	movs	r0, #3
}  
 800081e:	4770      	bx	lr
 8000820:	40007000 	.word	0x40007000
 8000824:	000f4240 	.word	0x000f4240
 8000828:	20000000 	.word	0x20000000

0800082c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800082c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800082e:	4d1e      	ldr	r5, [pc, #120]	; (80008a8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000830:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000832:	00da      	lsls	r2, r3, #3
{
 8000834:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000836:	d518      	bpl.n	800086a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000838:	f7ff ffbc 	bl	80007b4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800083c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000840:	d123      	bne.n	800088a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000842:	2c80      	cmp	r4, #128	; 0x80
 8000844:	d929      	bls.n	800089a <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000846:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000848:	bf8c      	ite	hi
 800084a:	2002      	movhi	r0, #2
 800084c:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800084e:	4a17      	ldr	r2, [pc, #92]	; (80008ac <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000850:	6813      	ldr	r3, [r2, #0]
 8000852:	f023 0307 	bic.w	r3, r3, #7
 8000856:	4303      	orrs	r3, r0
 8000858:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 800085a:	6813      	ldr	r3, [r2, #0]
 800085c:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000860:	1a18      	subs	r0, r3, r0
 8000862:	bf18      	it	ne
 8000864:	2001      	movne	r0, #1
 8000866:	b003      	add	sp, #12
 8000868:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000870:	65ab      	str	r3, [r5, #88]	; 0x58
 8000872:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800087c:	f7ff ff9a 	bl	80007b4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000880:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000886:	65ab      	str	r3, [r5, #88]	; 0x58
 8000888:	e7d8      	b.n	800083c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800088a:	2c80      	cmp	r4, #128	; 0x80
 800088c:	d807      	bhi.n	800089e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800088e:	d008      	beq.n	80008a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8000890:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000894:	4258      	negs	r0, r3
 8000896:	4158      	adcs	r0, r3
 8000898:	e7d9      	b.n	800084e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800089a:	2000      	movs	r0, #0
 800089c:	e7d7      	b.n	800084e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800089e:	2003      	movs	r0, #3
 80008a0:	e7d5      	b.n	800084e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80008a2:	2002      	movs	r0, #2
 80008a4:	e7d3      	b.n	800084e <RCC_SetFlashLatencyFromMSIRange+0x22>
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40022000 	.word	0x40022000

080008b0 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80008b0:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <HAL_RCC_GetSysClockFreq+0xc0>)
 80008b2:	689a      	ldr	r2, [r3, #8]
 80008b4:	f012 0f0c 	tst.w	r2, #12
{
 80008b8:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80008ba:	d009      	beq.n	80008d0 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80008bc:	689a      	ldr	r2, [r3, #8]
 80008be:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80008c2:	2a0c      	cmp	r2, #12
 80008c4:	d12d      	bne.n	8000922 <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80008c6:	68da      	ldr	r2, [r3, #12]
 80008c8:	f002 0203 	and.w	r2, r2, #3
 80008cc:	2a01      	cmp	r2, #1
 80008ce:	d128      	bne.n	8000922 <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80008d0:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80008d2:	4928      	ldr	r1, [pc, #160]	; (8000974 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80008d4:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80008d6:	bf55      	itete	pl
 80008d8:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80008dc:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80008de:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80008e2:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 80008e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80008ea:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 80008ec:	f011 0f0c 	tst.w	r1, #12
 80008f0:	bf0c      	ite	eq
 80008f2:	4610      	moveq	r0, r2
 80008f4:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80008f6:	6899      	ldr	r1, [r3, #8]
 80008f8:	f001 010c 	and.w	r1, r1, #12
 80008fc:	290c      	cmp	r1, #12
 80008fe:	d130      	bne.n	8000962 <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000900:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000902:	68d8      	ldr	r0, [r3, #12]
 8000904:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8000908:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800090a:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 800090e:	2802      	cmp	r0, #2
 8000910:	d019      	beq.n	8000946 <HAL_RCC_GetSysClockFreq+0x96>
 8000912:	2803      	cmp	r0, #3
 8000914:	d026      	beq.n	8000964 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000916:	fbb2 f2f1 	udiv	r2, r2, r1
 800091a:	68d8      	ldr	r0, [r3, #12]
 800091c:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8000920:	e017      	b.n	8000952 <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8000922:	689a      	ldr	r2, [r3, #8]
 8000924:	f002 020c 	and.w	r2, r2, #12
 8000928:	2a04      	cmp	r2, #4
 800092a:	d007      	beq.n	800093c <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800092c:	689a      	ldr	r2, [r3, #8]
 800092e:	f002 020c 	and.w	r2, r2, #12
 8000932:	2a08      	cmp	r2, #8
 8000934:	d104      	bne.n	8000940 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8000936:	4810      	ldr	r0, [pc, #64]	; (8000978 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000938:	2200      	movs	r2, #0
 800093a:	e7dc      	b.n	80008f6 <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 800093c:	480f      	ldr	r0, [pc, #60]	; (800097c <HAL_RCC_GetSysClockFreq+0xcc>)
 800093e:	e7fb      	b.n	8000938 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8000940:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000942:	4602      	mov	r2, r0
 8000944:	e7d7      	b.n	80008f6 <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000946:	68da      	ldr	r2, [r3, #12]
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <HAL_RCC_GetSysClockFreq+0xcc>)
 800094a:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800094e:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000958:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800095a:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800095c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800095e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000962:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000964:	68da      	ldr	r2, [r3, #12]
 8000966:	4804      	ldr	r0, [pc, #16]	; (8000978 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000968:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800096c:	e7ef      	b.n	800094e <HAL_RCC_GetSysClockFreq+0x9e>
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000
 8000974:	08001be8 	.word	0x08001be8
 8000978:	007a1200 	.word	0x007a1200
 800097c:	00f42400 	.word	0x00f42400

08000980 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000980:	6803      	ldr	r3, [r0, #0]
{
 8000982:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000986:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000988:	06d8      	lsls	r0, r3, #27
 800098a:	d539      	bpl.n	8000a00 <HAL_RCC_OscConfig+0x80>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800098c:	4cab      	ldr	r4, [pc, #684]	; (8000c3c <HAL_RCC_OscConfig+0x2bc>)
 800098e:	68a3      	ldr	r3, [r4, #8]
 8000990:	f013 0f0c 	tst.w	r3, #12
 8000994:	d162      	bne.n	8000a5c <HAL_RCC_OscConfig+0xdc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000996:	6823      	ldr	r3, [r4, #0]
 8000998:	0799      	lsls	r1, r3, #30
 800099a:	d503      	bpl.n	80009a4 <HAL_RCC_OscConfig+0x24>
 800099c:	69ab      	ldr	r3, [r5, #24]
 800099e:	b90b      	cbnz	r3, 80009a4 <HAL_RCC_OscConfig+0x24>
      return HAL_ERROR;
 80009a0:	2001      	movs	r0, #1
 80009a2:	e07f      	b.n	8000aa4 <HAL_RCC_OscConfig+0x124>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80009a4:	6823      	ldr	r3, [r4, #0]
 80009a6:	6a28      	ldr	r0, [r5, #32]
 80009a8:	071a      	lsls	r2, r3, #28
 80009aa:	bf56      	itet	pl
 80009ac:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80009b0:	6823      	ldrmi	r3, [r4, #0]
 80009b2:	091b      	lsrpl	r3, r3, #4
 80009b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009b8:	4283      	cmp	r3, r0
 80009ba:	d23a      	bcs.n	8000a32 <HAL_RCC_OscConfig+0xb2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80009bc:	f7ff ff36 	bl	800082c <RCC_SetFlashLatencyFromMSIRange>
 80009c0:	2800      	cmp	r0, #0
 80009c2:	d1ed      	bne.n	80009a0 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009c4:	6823      	ldr	r3, [r4, #0]
 80009c6:	f043 0308 	orr.w	r3, r3, #8
 80009ca:	6023      	str	r3, [r4, #0]
 80009cc:	6823      	ldr	r3, [r4, #0]
 80009ce:	6a2a      	ldr	r2, [r5, #32]
 80009d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009d4:	4313      	orrs	r3, r2
 80009d6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009d8:	6863      	ldr	r3, [r4, #4]
 80009da:	69ea      	ldr	r2, [r5, #28]
 80009dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80009e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80009e4:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80009e6:	f7ff ff63 	bl	80008b0 <HAL_RCC_GetSysClockFreq>
 80009ea:	68a3      	ldr	r3, [r4, #8]
 80009ec:	4a94      	ldr	r2, [pc, #592]	; (8000c40 <HAL_RCC_OscConfig+0x2c0>)
 80009ee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80009f2:	5cd3      	ldrb	r3, [r2, r3]
 80009f4:	40d8      	lsrs	r0, r3
 80009f6:	4b93      	ldr	r3, [pc, #588]	; (8000c44 <HAL_RCC_OscConfig+0x2c4>)
 80009f8:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80009fa:	2000      	movs	r0, #0
 80009fc:	f7ff fd6e 	bl	80004dc <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a00:	682b      	ldr	r3, [r5, #0]
 8000a02:	07d8      	lsls	r0, r3, #31
 8000a04:	d461      	bmi.n	8000aca <HAL_RCC_OscConfig+0x14a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a06:	682b      	ldr	r3, [r5, #0]
 8000a08:	0799      	lsls	r1, r3, #30
 8000a0a:	f100 80a9 	bmi.w	8000b60 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a0e:	682b      	ldr	r3, [r5, #0]
 8000a10:	071a      	lsls	r2, r3, #28
 8000a12:	f100 80e7 	bmi.w	8000be4 <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a16:	682b      	ldr	r3, [r5, #0]
 8000a18:	075b      	lsls	r3, r3, #29
 8000a1a:	f100 8115 	bmi.w	8000c48 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000a1e:	682b      	ldr	r3, [r5, #0]
 8000a20:	069a      	lsls	r2, r3, #26
 8000a22:	f100 817c 	bmi.w	8000d1e <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000a26:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000a28:	2a00      	cmp	r2, #0
 8000a2a:	f040 81a3 	bne.w	8000d74 <HAL_RCC_OscConfig+0x3f4>
  return HAL_OK;
 8000a2e:	2000      	movs	r0, #0
 8000a30:	e038      	b.n	8000aa4 <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a32:	6823      	ldr	r3, [r4, #0]
 8000a34:	f043 0308 	orr.w	r3, r3, #8
 8000a38:	6023      	str	r3, [r4, #0]
 8000a3a:	6823      	ldr	r3, [r4, #0]
 8000a3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a40:	4303      	orrs	r3, r0
 8000a42:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a44:	6863      	ldr	r3, [r4, #4]
 8000a46:	69ea      	ldr	r2, [r5, #28]
 8000a48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a50:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a52:	f7ff feeb 	bl	800082c <RCC_SetFlashLatencyFromMSIRange>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	d0c5      	beq.n	80009e6 <HAL_RCC_OscConfig+0x66>
 8000a5a:	e7a1      	b.n	80009a0 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000a5c:	69ab      	ldr	r3, [r5, #24]
 8000a5e:	b323      	cbz	r3, 8000aaa <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_MSI_ENABLE();
 8000a60:	6823      	ldr	r3, [r4, #0]
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a68:	f7ff fd60 	bl	800052c <HAL_GetTick>
 8000a6c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	079b      	lsls	r3, r3, #30
 8000a72:	d511      	bpl.n	8000a98 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a74:	6823      	ldr	r3, [r4, #0]
 8000a76:	f043 0308 	orr.w	r3, r3, #8
 8000a7a:	6023      	str	r3, [r4, #0]
 8000a7c:	6823      	ldr	r3, [r4, #0]
 8000a7e:	6a2a      	ldr	r2, [r5, #32]
 8000a80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a84:	4313      	orrs	r3, r2
 8000a86:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a88:	6863      	ldr	r3, [r4, #4]
 8000a8a:	69ea      	ldr	r2, [r5, #28]
 8000a8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a94:	6063      	str	r3, [r4, #4]
 8000a96:	e7b3      	b.n	8000a00 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a98:	f7ff fd48 	bl	800052c <HAL_GetTick>
 8000a9c:	1b80      	subs	r0, r0, r6
 8000a9e:	2802      	cmp	r0, #2
 8000aa0:	d9e5      	bls.n	8000a6e <HAL_RCC_OscConfig+0xee>
            return HAL_TIMEOUT;
 8000aa2:	2003      	movs	r0, #3
}
 8000aa4:	b002      	add	sp, #8
 8000aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_MSI_DISABLE();
 8000aaa:	6823      	ldr	r3, [r4, #0]
 8000aac:	f023 0301 	bic.w	r3, r3, #1
 8000ab0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ab2:	f7ff fd3b 	bl	800052c <HAL_GetTick>
 8000ab6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000ab8:	6823      	ldr	r3, [r4, #0]
 8000aba:	079f      	lsls	r7, r3, #30
 8000abc:	d5a0      	bpl.n	8000a00 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000abe:	f7ff fd35 	bl	800052c <HAL_GetTick>
 8000ac2:	1b80      	subs	r0, r0, r6
 8000ac4:	2802      	cmp	r0, #2
 8000ac6:	d9f7      	bls.n	8000ab8 <HAL_RCC_OscConfig+0x138>
 8000ac8:	e7eb      	b.n	8000aa2 <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8000aca:	4c5c      	ldr	r4, [pc, #368]	; (8000c3c <HAL_RCC_OscConfig+0x2bc>)
 8000acc:	68a3      	ldr	r3, [r4, #8]
 8000ace:	f003 030c 	and.w	r3, r3, #12
 8000ad2:	2b08      	cmp	r3, #8
 8000ad4:	d009      	beq.n	8000aea <HAL_RCC_OscConfig+0x16a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ad6:	68a3      	ldr	r3, [r4, #8]
 8000ad8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8000adc:	2b0c      	cmp	r3, #12
 8000ade:	d10b      	bne.n	8000af8 <HAL_RCC_OscConfig+0x178>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ae0:	68e3      	ldr	r3, [r4, #12]
 8000ae2:	f003 0303 	and.w	r3, r3, #3
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d106      	bne.n	8000af8 <HAL_RCC_OscConfig+0x178>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aea:	6823      	ldr	r3, [r4, #0]
 8000aec:	039a      	lsls	r2, r3, #14
 8000aee:	d58a      	bpl.n	8000a06 <HAL_RCC_OscConfig+0x86>
 8000af0:	686b      	ldr	r3, [r5, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d187      	bne.n	8000a06 <HAL_RCC_OscConfig+0x86>
 8000af6:	e753      	b.n	80009a0 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000af8:	686b      	ldr	r3, [r5, #4]
 8000afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000afe:	d110      	bne.n	8000b22 <HAL_RCC_OscConfig+0x1a2>
 8000b00:	6823      	ldr	r3, [r4, #0]
 8000b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b06:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b08:	f7ff fd10 	bl	800052c <HAL_GetTick>
 8000b0c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000b0e:	6823      	ldr	r3, [r4, #0]
 8000b10:	039b      	lsls	r3, r3, #14
 8000b12:	f53f af78 	bmi.w	8000a06 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b16:	f7ff fd09 	bl	800052c <HAL_GetTick>
 8000b1a:	1b80      	subs	r0, r0, r6
 8000b1c:	2864      	cmp	r0, #100	; 0x64
 8000b1e:	d9f6      	bls.n	8000b0e <HAL_RCC_OscConfig+0x18e>
 8000b20:	e7bf      	b.n	8000aa2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b26:	d104      	bne.n	8000b32 <HAL_RCC_OscConfig+0x1b2>
 8000b28:	6823      	ldr	r3, [r4, #0]
 8000b2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b2e:	6023      	str	r3, [r4, #0]
 8000b30:	e7e6      	b.n	8000b00 <HAL_RCC_OscConfig+0x180>
 8000b32:	6822      	ldr	r2, [r4, #0]
 8000b34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b38:	6022      	str	r2, [r4, #0]
 8000b3a:	6822      	ldr	r2, [r4, #0]
 8000b3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b40:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d1e0      	bne.n	8000b08 <HAL_RCC_OscConfig+0x188>
        tickstart = HAL_GetTick();
 8000b46:	f7ff fcf1 	bl	800052c <HAL_GetTick>
 8000b4a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000b4c:	6823      	ldr	r3, [r4, #0]
 8000b4e:	039f      	lsls	r7, r3, #14
 8000b50:	f57f af59 	bpl.w	8000a06 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b54:	f7ff fcea 	bl	800052c <HAL_GetTick>
 8000b58:	1b80      	subs	r0, r0, r6
 8000b5a:	2864      	cmp	r0, #100	; 0x64
 8000b5c:	d9f6      	bls.n	8000b4c <HAL_RCC_OscConfig+0x1cc>
 8000b5e:	e7a0      	b.n	8000aa2 <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000b60:	4c36      	ldr	r4, [pc, #216]	; (8000c3c <HAL_RCC_OscConfig+0x2bc>)
 8000b62:	68a3      	ldr	r3, [r4, #8]
 8000b64:	f003 030c 	and.w	r3, r3, #12
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	d009      	beq.n	8000b80 <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b6c:	68a3      	ldr	r3, [r4, #8]
 8000b6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000b72:	2b0c      	cmp	r3, #12
 8000b74:	d113      	bne.n	8000b9e <HAL_RCC_OscConfig+0x21e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b76:	68e3      	ldr	r3, [r4, #12]
 8000b78:	f003 0303 	and.w	r3, r3, #3
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d10e      	bne.n	8000b9e <HAL_RCC_OscConfig+0x21e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000b80:	6823      	ldr	r3, [r4, #0]
 8000b82:	055e      	lsls	r6, r3, #21
 8000b84:	d503      	bpl.n	8000b8e <HAL_RCC_OscConfig+0x20e>
 8000b86:	68eb      	ldr	r3, [r5, #12]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f43f af09 	beq.w	80009a0 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b8e:	6863      	ldr	r3, [r4, #4]
 8000b90:	692a      	ldr	r2, [r5, #16]
 8000b92:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000b96:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b9a:	6063      	str	r3, [r4, #4]
 8000b9c:	e737      	b.n	8000a0e <HAL_RCC_OscConfig+0x8e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b9e:	68eb      	ldr	r3, [r5, #12]
 8000ba0:	b17b      	cbz	r3, 8000bc2 <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_HSI_ENABLE();
 8000ba2:	6823      	ldr	r3, [r4, #0]
 8000ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000baa:	f7ff fcbf 	bl	800052c <HAL_GetTick>
 8000bae:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000bb0:	6823      	ldr	r3, [r4, #0]
 8000bb2:	0558      	lsls	r0, r3, #21
 8000bb4:	d4eb      	bmi.n	8000b8e <HAL_RCC_OscConfig+0x20e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bb6:	f7ff fcb9 	bl	800052c <HAL_GetTick>
 8000bba:	1b80      	subs	r0, r0, r6
 8000bbc:	2802      	cmp	r0, #2
 8000bbe:	d9f7      	bls.n	8000bb0 <HAL_RCC_OscConfig+0x230>
 8000bc0:	e76f      	b.n	8000aa2 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_DISABLE();
 8000bc2:	6823      	ldr	r3, [r4, #0]
 8000bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bc8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bca:	f7ff fcaf 	bl	800052c <HAL_GetTick>
 8000bce:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8000bd0:	6823      	ldr	r3, [r4, #0]
 8000bd2:	0559      	lsls	r1, r3, #21
 8000bd4:	f57f af1b 	bpl.w	8000a0e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bd8:	f7ff fca8 	bl	800052c <HAL_GetTick>
 8000bdc:	1b80      	subs	r0, r0, r6
 8000bde:	2802      	cmp	r0, #2
 8000be0:	d9f6      	bls.n	8000bd0 <HAL_RCC_OscConfig+0x250>
 8000be2:	e75e      	b.n	8000aa2 <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000be4:	696b      	ldr	r3, [r5, #20]
 8000be6:	4c15      	ldr	r4, [pc, #84]	; (8000c3c <HAL_RCC_OscConfig+0x2bc>)
 8000be8:	b19b      	cbz	r3, 8000c12 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_ENABLE();
 8000bea:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000bf6:	f7ff fc99 	bl	800052c <HAL_GetTick>
 8000bfa:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8000bfc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c00:	079f      	lsls	r7, r3, #30
 8000c02:	f53f af08 	bmi.w	8000a16 <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c06:	f7ff fc91 	bl	800052c <HAL_GetTick>
 8000c0a:	1b80      	subs	r0, r0, r6
 8000c0c:	2802      	cmp	r0, #2
 8000c0e:	d9f5      	bls.n	8000bfc <HAL_RCC_OscConfig+0x27c>
 8000c10:	e747      	b.n	8000aa2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8000c12:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c16:	f023 0301 	bic.w	r3, r3, #1
 8000c1a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000c1e:	f7ff fc85 	bl	800052c <HAL_GetTick>
 8000c22:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8000c24:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c28:	0798      	lsls	r0, r3, #30
 8000c2a:	f57f aef4 	bpl.w	8000a16 <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c2e:	f7ff fc7d 	bl	800052c <HAL_GetTick>
 8000c32:	1b80      	subs	r0, r0, r6
 8000c34:	2802      	cmp	r0, #2
 8000c36:	d9f5      	bls.n	8000c24 <HAL_RCC_OscConfig+0x2a4>
 8000c38:	e733      	b.n	8000aa2 <HAL_RCC_OscConfig+0x122>
 8000c3a:	bf00      	nop
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	08001bcd 	.word	0x08001bcd
 8000c44:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000c48:	4c79      	ldr	r4, [pc, #484]	; (8000e30 <HAL_RCC_OscConfig+0x4b0>)
 8000c4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c4c:	00d9      	lsls	r1, r3, #3
 8000c4e:	d427      	bmi.n	8000ca0 <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c56:	65a3      	str	r3, [r4, #88]	; 0x58
 8000c58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c62:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c64:	4e73      	ldr	r6, [pc, #460]	; (8000e34 <HAL_RCC_OscConfig+0x4b4>)
 8000c66:	6833      	ldr	r3, [r6, #0]
 8000c68:	05da      	lsls	r2, r3, #23
 8000c6a:	d51b      	bpl.n	8000ca4 <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c6c:	68ab      	ldr	r3, [r5, #8]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d129      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x346>
 8000c72:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000c7e:	f7ff fc55 	bl	800052c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c82:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c86:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8000c88:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000c8c:	0798      	lsls	r0, r3, #30
 8000c8e:	d540      	bpl.n	8000d12 <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 8000c90:	2f00      	cmp	r7, #0
 8000c92:	f43f aec4 	beq.w	8000a1e <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	65a3      	str	r3, [r4, #88]	; 0x58
 8000c9e:	e6be      	b.n	8000a1e <HAL_RCC_OscConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;
 8000ca0:	2700      	movs	r7, #0
 8000ca2:	e7df      	b.n	8000c64 <HAL_RCC_OscConfig+0x2e4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ca4:	6833      	ldr	r3, [r6, #0]
 8000ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000caa:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000cac:	f7ff fc3e 	bl	800052c <HAL_GetTick>
 8000cb0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000cb2:	6833      	ldr	r3, [r6, #0]
 8000cb4:	05db      	lsls	r3, r3, #23
 8000cb6:	d4d9      	bmi.n	8000c6c <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cb8:	f7ff fc38 	bl	800052c <HAL_GetTick>
 8000cbc:	eba0 0008 	sub.w	r0, r0, r8
 8000cc0:	2802      	cmp	r0, #2
 8000cc2:	d9f6      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x332>
 8000cc4:	e6ed      	b.n	8000aa2 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cc6:	2b05      	cmp	r3, #5
 8000cc8:	d106      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x358>
 8000cca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000cd6:	e7cc      	b.n	8000c72 <HAL_RCC_OscConfig+0x2f2>
 8000cd8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000cdc:	f022 0201 	bic.w	r2, r2, #1
 8000ce0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000ce4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000ce8:	f022 0204 	bic.w	r2, r2, #4
 8000cec:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d1c4      	bne.n	8000c7e <HAL_RCC_OscConfig+0x2fe>
      tickstart = HAL_GetTick();
 8000cf4:	f7ff fc1a 	bl	800052c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cf8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000cfc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8000cfe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d02:	0799      	lsls	r1, r3, #30
 8000d04:	d5c4      	bpl.n	8000c90 <HAL_RCC_OscConfig+0x310>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d06:	f7ff fc11 	bl	800052c <HAL_GetTick>
 8000d0a:	1b80      	subs	r0, r0, r6
 8000d0c:	4540      	cmp	r0, r8
 8000d0e:	d9f6      	bls.n	8000cfe <HAL_RCC_OscConfig+0x37e>
 8000d10:	e6c7      	b.n	8000aa2 <HAL_RCC_OscConfig+0x122>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d12:	f7ff fc0b 	bl	800052c <HAL_GetTick>
 8000d16:	1b80      	subs	r0, r0, r6
 8000d18:	4540      	cmp	r0, r8
 8000d1a:	d9b5      	bls.n	8000c88 <HAL_RCC_OscConfig+0x308>
 8000d1c:	e6c1      	b.n	8000aa2 <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000d1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000d20:	4c43      	ldr	r4, [pc, #268]	; (8000e30 <HAL_RCC_OscConfig+0x4b0>)
 8000d22:	b19b      	cbz	r3, 8000d4c <HAL_RCC_OscConfig+0x3cc>
      __HAL_RCC_HSI48_ENABLE();
 8000d24:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000d30:	f7ff fbfc 	bl	800052c <HAL_GetTick>
 8000d34:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8000d36:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000d3a:	079b      	lsls	r3, r3, #30
 8000d3c:	f53f ae73 	bmi.w	8000a26 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d40:	f7ff fbf4 	bl	800052c <HAL_GetTick>
 8000d44:	1b80      	subs	r0, r0, r6
 8000d46:	2802      	cmp	r0, #2
 8000d48:	d9f5      	bls.n	8000d36 <HAL_RCC_OscConfig+0x3b6>
 8000d4a:	e6aa      	b.n	8000aa2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8000d4c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000d50:	f023 0301 	bic.w	r3, r3, #1
 8000d54:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000d58:	f7ff fbe8 	bl	800052c <HAL_GetTick>
 8000d5c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8000d5e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000d62:	079f      	lsls	r7, r3, #30
 8000d64:	f57f ae5f 	bpl.w	8000a26 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d68:	f7ff fbe0 	bl	800052c <HAL_GetTick>
 8000d6c:	1b80      	subs	r0, r0, r6
 8000d6e:	2802      	cmp	r0, #2
 8000d70:	d9f5      	bls.n	8000d5e <HAL_RCC_OscConfig+0x3de>
 8000d72:	e696      	b.n	8000aa2 <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000d74:	4c2e      	ldr	r4, [pc, #184]	; (8000e30 <HAL_RCC_OscConfig+0x4b0>)
 8000d76:	68a3      	ldr	r3, [r4, #8]
 8000d78:	f003 030c 	and.w	r3, r3, #12
 8000d7c:	2b0c      	cmp	r3, #12
 8000d7e:	f43f ae0f 	beq.w	80009a0 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8000d82:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000d84:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d8a:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000d8c:	d136      	bne.n	8000dfc <HAL_RCC_OscConfig+0x47c>
        tickstart = HAL_GetTick();
 8000d8e:	f7ff fbcd 	bl	800052c <HAL_GetTick>
 8000d92:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000d94:	6823      	ldr	r3, [r4, #0]
 8000d96:	0198      	lsls	r0, r3, #6
 8000d98:	d42a      	bmi.n	8000df0 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d9a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000d9c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000d9e:	06db      	lsls	r3, r3, #27
 8000da0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000da4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000da6:	4313      	orrs	r3, r2
 8000da8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000daa:	3a01      	subs	r2, #1
 8000dac:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000db0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000db2:	0852      	lsrs	r2, r2, #1
 8000db4:	3a01      	subs	r2, #1
 8000db6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000dba:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000dbc:	0852      	lsrs	r2, r2, #1
 8000dbe:	3a01      	subs	r2, #1
 8000dc0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000dc4:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000dc6:	6823      	ldr	r3, [r4, #0]
 8000dc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dcc:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000dce:	68e3      	ldr	r3, [r4, #12]
 8000dd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dd4:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000dd6:	f7ff fba9 	bl	800052c <HAL_GetTick>
 8000dda:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	0199      	lsls	r1, r3, #6
 8000de0:	f53f ae25 	bmi.w	8000a2e <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000de4:	f7ff fba2 	bl	800052c <HAL_GetTick>
 8000de8:	1b40      	subs	r0, r0, r5
 8000dea:	2802      	cmp	r0, #2
 8000dec:	d9f6      	bls.n	8000ddc <HAL_RCC_OscConfig+0x45c>
 8000dee:	e658      	b.n	8000aa2 <HAL_RCC_OscConfig+0x122>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000df0:	f7ff fb9c 	bl	800052c <HAL_GetTick>
 8000df4:	1b80      	subs	r0, r0, r6
 8000df6:	2802      	cmp	r0, #2
 8000df8:	d9cc      	bls.n	8000d94 <HAL_RCC_OscConfig+0x414>
 8000dfa:	e652      	b.n	8000aa2 <HAL_RCC_OscConfig+0x122>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8000dfc:	6823      	ldr	r3, [r4, #0]
 8000dfe:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000e00:	bf5e      	ittt	pl
 8000e02:	68e3      	ldrpl	r3, [r4, #12]
 8000e04:	f023 0303 	bicpl.w	r3, r3, #3
 8000e08:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8000e0a:	68e3      	ldr	r3, [r4, #12]
 8000e0c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e14:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000e16:	f7ff fb89 	bl	800052c <HAL_GetTick>
 8000e1a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000e1c:	6823      	ldr	r3, [r4, #0]
 8000e1e:	019b      	lsls	r3, r3, #6
 8000e20:	f57f ae05 	bpl.w	8000a2e <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e24:	f7ff fb82 	bl	800052c <HAL_GetTick>
 8000e28:	1b40      	subs	r0, r0, r5
 8000e2a:	2802      	cmp	r0, #2
 8000e2c:	d9f6      	bls.n	8000e1c <HAL_RCC_OscConfig+0x49c>
 8000e2e:	e638      	b.n	8000aa2 <HAL_RCC_OscConfig+0x122>
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40007000 	.word	0x40007000

08000e38 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8000e38:	4a56      	ldr	r2, [pc, #344]	; (8000f94 <HAL_RCC_ClockConfig+0x15c>)
 8000e3a:	6813      	ldr	r3, [r2, #0]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	428b      	cmp	r3, r1
{
 8000e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e46:	4605      	mov	r5, r0
 8000e48:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8000e4a:	d32b      	bcc.n	8000ea4 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e4c:	682b      	ldr	r3, [r5, #0]
 8000e4e:	07d9      	lsls	r1, r3, #31
 8000e50:	d435      	bmi.n	8000ebe <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e52:	6829      	ldr	r1, [r5, #0]
 8000e54:	078a      	lsls	r2, r1, #30
 8000e56:	f100 8083 	bmi.w	8000f60 <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8000e5a:	4a4e      	ldr	r2, [pc, #312]	; (8000f94 <HAL_RCC_ClockConfig+0x15c>)
 8000e5c:	6813      	ldr	r3, [r2, #0]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	429e      	cmp	r6, r3
 8000e64:	f0c0 8084 	bcc.w	8000f70 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e68:	f011 0f04 	tst.w	r1, #4
 8000e6c:	4c4a      	ldr	r4, [pc, #296]	; (8000f98 <HAL_RCC_ClockConfig+0x160>)
 8000e6e:	f040 808a 	bne.w	8000f86 <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e72:	070b      	lsls	r3, r1, #28
 8000e74:	d506      	bpl.n	8000e84 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000e76:	68a3      	ldr	r3, [r4, #8]
 8000e78:	692a      	ldr	r2, [r5, #16]
 8000e7a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000e7e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e82:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e84:	f7ff fd14 	bl	80008b0 <HAL_RCC_GetSysClockFreq>
 8000e88:	68a3      	ldr	r3, [r4, #8]
 8000e8a:	4a44      	ldr	r2, [pc, #272]	; (8000f9c <HAL_RCC_ClockConfig+0x164>)
 8000e8c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e90:	5cd3      	ldrb	r3, [r2, r3]
 8000e92:	40d8      	lsrs	r0, r3
 8000e94:	4b42      	ldr	r3, [pc, #264]	; (8000fa0 <HAL_RCC_ClockConfig+0x168>)
 8000e96:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff fb1f 	bl	80004dc <HAL_InitTick>
  return HAL_OK;
 8000e9e:	2000      	movs	r0, #0
}
 8000ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ea4:	6813      	ldr	r3, [r2, #0]
 8000ea6:	f023 0307 	bic.w	r3, r3, #7
 8000eaa:	430b      	orrs	r3, r1
 8000eac:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8000eae:	6813      	ldr	r3, [r2, #0]
 8000eb0:	f003 0307 	and.w	r3, r3, #7
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	d0c9      	beq.n	8000e4c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000eb8:	2001      	movs	r0, #1
 8000eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ebe:	686a      	ldr	r2, [r5, #4]
 8000ec0:	4c35      	ldr	r4, [pc, #212]	; (8000f98 <HAL_RCC_ClockConfig+0x160>)
 8000ec2:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000ec4:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ec6:	d11c      	bne.n	8000f02 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000ec8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000ecc:	d0f4      	beq.n	8000eb8 <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000ece:	68a3      	ldr	r3, [r4, #8]
 8000ed0:	f023 0303 	bic.w	r3, r3, #3
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8000ed8:	f7ff fb28 	bl	800052c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000edc:	686b      	ldr	r3, [r5, #4]
 8000ede:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 8000ee0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ee2:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ee6:	d118      	bne.n	8000f1a <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ee8:	68a3      	ldr	r3, [r4, #8]
 8000eea:	f003 030c 	and.w	r3, r3, #12
 8000eee:	2b0c      	cmp	r3, #12
 8000ef0:	d0af      	beq.n	8000e52 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ef2:	f7ff fb1b 	bl	800052c <HAL_GetTick>
 8000ef6:	1bc0      	subs	r0, r0, r7
 8000ef8:	4540      	cmp	r0, r8
 8000efa:	d9f5      	bls.n	8000ee8 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8000efc:	2003      	movs	r0, #3
 8000efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f02:	2a02      	cmp	r2, #2
 8000f04:	d102      	bne.n	8000f0c <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000f06:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f0a:	e7df      	b.n	8000ecc <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000f0c:	b912      	cbnz	r2, 8000f14 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000f0e:	f013 0f02 	tst.w	r3, #2
 8000f12:	e7db      	b.n	8000ecc <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000f14:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000f18:	e7d8      	b.n	8000ecc <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d10a      	bne.n	8000f34 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8000f1e:	68a3      	ldr	r3, [r4, #8]
 8000f20:	f003 030c 	and.w	r3, r3, #12
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d094      	beq.n	8000e52 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f28:	f7ff fb00 	bl	800052c <HAL_GetTick>
 8000f2c:	1bc0      	subs	r0, r0, r7
 8000f2e:	4540      	cmp	r0, r8
 8000f30:	d9f5      	bls.n	8000f1e <HAL_RCC_ClockConfig+0xe6>
 8000f32:	e7e3      	b.n	8000efc <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000f34:	b973      	cbnz	r3, 8000f54 <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8000f36:	68a3      	ldr	r3, [r4, #8]
 8000f38:	f013 0f0c 	tst.w	r3, #12
 8000f3c:	d089      	beq.n	8000e52 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f3e:	f7ff faf5 	bl	800052c <HAL_GetTick>
 8000f42:	1bc0      	subs	r0, r0, r7
 8000f44:	4540      	cmp	r0, r8
 8000f46:	d9f6      	bls.n	8000f36 <HAL_RCC_ClockConfig+0xfe>
 8000f48:	e7d8      	b.n	8000efc <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f4a:	f7ff faef 	bl	800052c <HAL_GetTick>
 8000f4e:	1bc0      	subs	r0, r0, r7
 8000f50:	4540      	cmp	r0, r8
 8000f52:	d8d3      	bhi.n	8000efc <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8000f54:	68a3      	ldr	r3, [r4, #8]
 8000f56:	f003 030c 	and.w	r3, r3, #12
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	d1f5      	bne.n	8000f4a <HAL_RCC_ClockConfig+0x112>
 8000f5e:	e778      	b.n	8000e52 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <HAL_RCC_ClockConfig+0x160>)
 8000f62:	68a8      	ldr	r0, [r5, #8]
 8000f64:	6893      	ldr	r3, [r2, #8]
 8000f66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f6a:	4303      	orrs	r3, r0
 8000f6c:	6093      	str	r3, [r2, #8]
 8000f6e:	e774      	b.n	8000e5a <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f70:	6813      	ldr	r3, [r2, #0]
 8000f72:	f023 0307 	bic.w	r3, r3, #7
 8000f76:	4333      	orrs	r3, r6
 8000f78:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8000f7a:	6813      	ldr	r3, [r2, #0]
 8000f7c:	f003 0307 	and.w	r3, r3, #7
 8000f80:	429e      	cmp	r6, r3
 8000f82:	d199      	bne.n	8000eb8 <HAL_RCC_ClockConfig+0x80>
 8000f84:	e770      	b.n	8000e68 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f86:	68a3      	ldr	r3, [r4, #8]
 8000f88:	68ea      	ldr	r2, [r5, #12]
 8000f8a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	60a3      	str	r3, [r4, #8]
 8000f92:	e76e      	b.n	8000e72 <HAL_RCC_ClockConfig+0x3a>
 8000f94:	40022000 	.word	0x40022000
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	08001bcd 	.word	0x08001bcd
 8000fa0:	20000000 	.word	0x20000000

08000fa4 <HAL_RCC_GetHCLKFreq>:
}
 8000fa4:	4b01      	ldr	r3, [pc, #4]	; (8000fac <HAL_RCC_GetHCLKFreq+0x8>)
 8000fa6:	6818      	ldr	r0, [r3, #0]
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000000 	.word	0x20000000

08000fb0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000fba:	5cd3      	ldrb	r3, [r2, r3]
 8000fbc:	4a03      	ldr	r2, [pc, #12]	; (8000fcc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000fbe:	6810      	ldr	r0, [r2, #0]
}
 8000fc0:	40d8      	lsrs	r0, r3
 8000fc2:	4770      	bx	lr
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	08001bdd 	.word	0x08001bdd
 8000fcc:	20000000 	.word	0x20000000

08000fd0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000fda:	5cd3      	ldrb	r3, [r2, r3]
 8000fdc:	4a03      	ldr	r2, [pc, #12]	; (8000fec <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000fde:	6810      	ldr	r0, [r2, #0]
}
 8000fe0:	40d8      	lsrs	r0, r3
 8000fe2:	4770      	bx	lr
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	08001bdd 	.word	0x08001bdd
 8000fec:	20000000 	.word	0x20000000

08000ff0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8000ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8000ff2:	4b44      	ldr	r3, [pc, #272]	; (8001104 <RCCEx_PLLSAI1_Config+0x114>)
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	f012 0f03 	tst.w	r2, #3
{
 8000ffa:	4605      	mov	r5, r0
 8000ffc:	460e      	mov	r6, r1
 8000ffe:	461c      	mov	r4, r3
 8001000:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001002:	d039      	beq.n	8001078 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001004:	68da      	ldr	r2, [r3, #12]
 8001006:	f002 0203 	and.w	r2, r2, #3
 800100a:	4282      	cmp	r2, r0
 800100c:	d14b      	bne.n	80010a6 <RCCEx_PLLSAI1_Config+0xb6>
       ||
 800100e:	2a00      	cmp	r2, #0
 8001010:	d049      	beq.n	80010a6 <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001012:	68db      	ldr	r3, [r3, #12]
       ||
 8001014:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001016:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800101a:	3301      	adds	r3, #1
       ||
 800101c:	4293      	cmp	r3, r2
 800101e:	d142      	bne.n	80010a6 <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001026:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001028:	f7ff fa80 	bl	800052c <HAL_GetTick>
 800102c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	011a      	lsls	r2, r3, #4
 8001032:	d441      	bmi.n	80010b8 <RCCEx_PLLSAI1_Config+0xc8>
 8001034:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001036:	2e00      	cmp	r6, #0
 8001038:	d045      	beq.n	80010c6 <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800103a:	2e01      	cmp	r6, #1
 800103c:	d14f      	bne.n	80010de <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800103e:	6922      	ldr	r2, [r4, #16]
 8001040:	6928      	ldr	r0, [r5, #16]
 8001042:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001046:	0840      	lsrs	r0, r0, #1
 8001048:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800104c:	3801      	subs	r0, #1
 800104e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001052:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001056:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001058:	6823      	ldr	r3, [r4, #0]
 800105a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800105e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001060:	f7ff fa64 	bl	800052c <HAL_GetTick>
 8001064:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001066:	6823      	ldr	r3, [r4, #0]
 8001068:	011b      	lsls	r3, r3, #4
 800106a:	d545      	bpl.n	80010f8 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800106c:	6923      	ldr	r3, [r4, #16]
 800106e:	69aa      	ldr	r2, [r5, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	6123      	str	r3, [r4, #16]
 8001074:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8001078:	2802      	cmp	r0, #2
 800107a:	d010      	beq.n	800109e <RCCEx_PLLSAI1_Config+0xae>
 800107c:	2803      	cmp	r0, #3
 800107e:	d014      	beq.n	80010aa <RCCEx_PLLSAI1_Config+0xba>
 8001080:	2801      	cmp	r0, #1
 8001082:	d110      	bne.n	80010a6 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	079f      	lsls	r7, r3, #30
 8001088:	d5f5      	bpl.n	8001076 <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800108a:	68e3      	ldr	r3, [r4, #12]
 800108c:	686a      	ldr	r2, [r5, #4]
 800108e:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001092:	3a01      	subs	r2, #1
 8001094:	4318      	orrs	r0, r3
 8001096:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800109a:	60e0      	str	r0, [r4, #12]
 800109c:	e7c0      	b.n	8001020 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80010a4:	d1f1      	bne.n	800108a <RCCEx_PLLSAI1_Config+0x9a>
 80010a6:	2001      	movs	r0, #1
 80010a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	0391      	lsls	r1, r2, #14
 80010ae:	d4ec      	bmi.n	800108a <RCCEx_PLLSAI1_Config+0x9a>
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80010b6:	e7f5      	b.n	80010a4 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80010b8:	f7ff fa38 	bl	800052c <HAL_GetTick>
 80010bc:	1bc0      	subs	r0, r0, r7
 80010be:	2802      	cmp	r0, #2
 80010c0:	d9b5      	bls.n	800102e <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80010c2:	2003      	movs	r0, #3
 80010c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80010c6:	6922      	ldr	r2, [r4, #16]
 80010c8:	68e9      	ldr	r1, [r5, #12]
 80010ca:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 80010ce:	06c9      	lsls	r1, r1, #27
 80010d0:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 80010d4:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80010d8:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80010da:	6123      	str	r3, [r4, #16]
 80010dc:	e7bc      	b.n	8001058 <RCCEx_PLLSAI1_Config+0x68>
 80010de:	6923      	ldr	r3, [r4, #16]
 80010e0:	6968      	ldr	r0, [r5, #20]
 80010e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80010e6:	0840      	lsrs	r0, r0, #1
 80010e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80010ec:	3801      	subs	r0, #1
 80010ee:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80010f2:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80010f6:	e7f0      	b.n	80010da <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80010f8:	f7ff fa18 	bl	800052c <HAL_GetTick>
 80010fc:	1b80      	subs	r0, r0, r6
 80010fe:	2802      	cmp	r0, #2
 8001100:	d9b1      	bls.n	8001066 <RCCEx_PLLSAI1_Config+0x76>
 8001102:	e7de      	b.n	80010c2 <RCCEx_PLLSAI1_Config+0xd2>
 8001104:	40021000 	.word	0x40021000

08001108 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001108:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800110c:	6805      	ldr	r5, [r0, #0]
 800110e:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 8001112:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001114:	d00e      	beq.n	8001134 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001116:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001118:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800111c:	d05b      	beq.n	80011d6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 800111e:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001122:	d05d      	beq.n	80011e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001124:	2900      	cmp	r1, #0
 8001126:	d166      	bne.n	80011f6 <HAL_RCCEx_PeriphCLKConfig+0xee>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001128:	3004      	adds	r0, #4
 800112a:	f7ff ff61 	bl	8000ff0 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800112e:	4605      	mov	r5, r0
 8001130:	2800      	cmp	r0, #0
 8001132:	d055      	beq.n	80011e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	039e      	lsls	r6, r3, #14
 8001138:	d56d      	bpl.n	8001216 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800113a:	4e92      	ldr	r6, [pc, #584]	; (8001384 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800113c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800113e:	00d8      	lsls	r0, r3, #3
 8001140:	d45b      	bmi.n	80011fa <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	65b3      	str	r3, [r6, #88]	; 0x58
 800114a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800114c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001154:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001156:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8001388 <HAL_RCCEx_PeriphCLKConfig+0x280>
 800115a:	f8d8 3000 	ldr.w	r3, [r8]
 800115e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001162:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8001166:	f7ff f9e1 	bl	800052c <HAL_GetTick>
 800116a:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 800116c:	f8d8 3000 	ldr.w	r3, [r8]
 8001170:	05d9      	lsls	r1, r3, #23
 8001172:	d544      	bpl.n	80011fe <HAL_RCCEx_PeriphCLKConfig+0xf6>
    if(ret == HAL_OK)
 8001174:	2d00      	cmp	r5, #0
 8001176:	d149      	bne.n	800120c <HAL_RCCEx_PeriphCLKConfig+0x104>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001178:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800117c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001180:	d014      	beq.n	80011ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001182:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001184:	4293      	cmp	r3, r2
 8001186:	d011      	beq.n	80011ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001188:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800118c:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001190:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001194:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001198:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800119c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80011a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011a4:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80011a8:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80011ac:	07da      	lsls	r2, r3, #31
 80011ae:	d509      	bpl.n	80011c4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80011b0:	f7ff f9bc 	bl	800052c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011b4:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80011b8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80011ba:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80011be:	079b      	lsls	r3, r3, #30
 80011c0:	f140 80c2 	bpl.w	8001348 <HAL_RCCEx_PeriphCLKConfig+0x240>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80011c4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80011c8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80011ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011ce:	4313      	orrs	r3, r2
 80011d0:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 80011d4:	e01a      	b.n	800120c <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80011d6:	4a6b      	ldr	r2, [pc, #428]	; (8001384 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80011d8:	68d3      	ldr	r3, [r2, #12]
 80011da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011de:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80011e0:	4a68      	ldr	r2, [pc, #416]	; (8001384 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80011e2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80011e4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80011e8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80011ec:	430b      	orrs	r3, r1
 80011ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80011f2:	2500      	movs	r5, #0
 80011f4:	e79e      	b.n	8001134 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 80011f6:	2501      	movs	r5, #1
 80011f8:	e79c      	b.n	8001134 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80011fa:	2700      	movs	r7, #0
 80011fc:	e7ab      	b.n	8001156 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011fe:	f7ff f995 	bl	800052c <HAL_GetTick>
 8001202:	eba0 0009 	sub.w	r0, r0, r9
 8001206:	2802      	cmp	r0, #2
 8001208:	d9b0      	bls.n	800116c <HAL_RCCEx_PeriphCLKConfig+0x64>
        ret = HAL_TIMEOUT;
 800120a:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800120c:	b11f      	cbz	r7, 8001216 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800120e:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001214:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001216:	6823      	ldr	r3, [r4, #0]
 8001218:	07df      	lsls	r7, r3, #31
 800121a:	d508      	bpl.n	800122e <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800121c:	4959      	ldr	r1, [pc, #356]	; (8001384 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800121e:	6a20      	ldr	r0, [r4, #32]
 8001220:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001224:	f022 0203 	bic.w	r2, r2, #3
 8001228:	4302      	orrs	r2, r0
 800122a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800122e:	079e      	lsls	r6, r3, #30
 8001230:	d508      	bpl.n	8001244 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001232:	4954      	ldr	r1, [pc, #336]	; (8001384 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001234:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001236:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800123a:	f022 020c 	bic.w	r2, r2, #12
 800123e:	4302      	orrs	r2, r0
 8001240:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001244:	0698      	lsls	r0, r3, #26
 8001246:	d508      	bpl.n	800125a <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001248:	494e      	ldr	r1, [pc, #312]	; (8001384 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800124a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800124c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001250:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001254:	4302      	orrs	r2, r0
 8001256:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800125a:	0599      	lsls	r1, r3, #22
 800125c:	d508      	bpl.n	8001270 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800125e:	4949      	ldr	r1, [pc, #292]	; (8001384 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001260:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001262:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001266:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800126a:	4302      	orrs	r2, r0
 800126c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001270:	055a      	lsls	r2, r3, #21
 8001272:	d508      	bpl.n	8001286 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001274:	4943      	ldr	r1, [pc, #268]	; (8001384 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001276:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001278:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800127c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001280:	4302      	orrs	r2, r0
 8001282:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001286:	065f      	lsls	r7, r3, #25
 8001288:	d508      	bpl.n	800129c <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800128a:	493e      	ldr	r1, [pc, #248]	; (8001384 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800128c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800128e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001292:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001296:	4302      	orrs	r2, r0
 8001298:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800129c:	05de      	lsls	r6, r3, #23
 800129e:	d508      	bpl.n	80012b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80012a0:	4938      	ldr	r1, [pc, #224]	; (8001384 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80012a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80012a8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80012ac:	4302      	orrs	r2, r0
 80012ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80012b2:	0498      	lsls	r0, r3, #18
 80012b4:	d50f      	bpl.n	80012d6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80012b6:	4a33      	ldr	r2, [pc, #204]	; (8001384 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012b8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80012ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80012be:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80012c2:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80012c4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80012c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80012cc:	d144      	bne.n	8001358 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80012ce:	68d3      	ldr	r3, [r2, #12]
 80012d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012d4:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	0359      	lsls	r1, r3, #13
 80012da:	d50f      	bpl.n	80012fc <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80012dc:	4a29      	ldr	r2, [pc, #164]	; (8001384 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012de:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80012e0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80012e4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80012e8:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80012ea:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80012ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80012f2:	d13c      	bne.n	800136e <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80012f4:	68d3      	ldr	r3, [r2, #12]
 80012f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012fa:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	045a      	lsls	r2, r3, #17
 8001300:	d512      	bpl.n	8001328 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001302:	4920      	ldr	r1, [pc, #128]	; (8001384 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001304:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001306:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800130a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800130e:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001310:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001318:	d106      	bne.n	8001328 <HAL_RCCEx_PeriphCLKConfig+0x220>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800131a:	2102      	movs	r1, #2
 800131c:	1d20      	adds	r0, r4, #4
 800131e:	f7ff fe67 	bl	8000ff0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001322:	2800      	cmp	r0, #0
 8001324:	bf18      	it	ne
 8001326:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	041b      	lsls	r3, r3, #16
 800132c:	d508      	bpl.n	8001340 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800132e:	4a15      	ldr	r2, [pc, #84]	; (8001384 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001330:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001332:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001336:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800133a:	430b      	orrs	r3, r1
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001340:	4628      	mov	r0, r5
 8001342:	b003      	add	sp, #12
 8001344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001348:	f7ff f8f0 	bl	800052c <HAL_GetTick>
 800134c:	eba0 0008 	sub.w	r0, r0, r8
 8001350:	4548      	cmp	r0, r9
 8001352:	f67f af32 	bls.w	80011ba <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8001356:	e758      	b.n	800120a <HAL_RCCEx_PeriphCLKConfig+0x102>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001358:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800135c:	d1bb      	bne.n	80012d6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800135e:	2101      	movs	r1, #1
 8001360:	1d20      	adds	r0, r4, #4
 8001362:	f7ff fe45 	bl	8000ff0 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001366:	2800      	cmp	r0, #0
 8001368:	bf18      	it	ne
 800136a:	4605      	movne	r5, r0
 800136c:	e7b3      	b.n	80012d6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800136e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001372:	d1c3      	bne.n	80012fc <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001374:	2101      	movs	r1, #1
 8001376:	1d20      	adds	r0, r4, #4
 8001378:	f7ff fe3a 	bl	8000ff0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800137c:	2800      	cmp	r0, #0
 800137e:	bf18      	it	ne
 8001380:	4605      	movne	r5, r0
 8001382:	e7bb      	b.n	80012fc <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8001384:	40021000 	.word	0x40021000
 8001388:	40007000 	.word	0x40007000

0800138c <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800138c:	4a02      	ldr	r2, [pc, #8]	; (8001398 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800138e:	6813      	ldr	r3, [r2, #0]
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	4770      	bx	lr
 8001398:	40021000 	.word	0x40021000

0800139c <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 800139c:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800139e:	69c1      	ldr	r1, [r0, #28]
{
 80013a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013a2:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013a4:	6883      	ldr	r3, [r0, #8]
 80013a6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80013a8:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013aa:	4303      	orrs	r3, r0
 80013ac:	6960      	ldr	r0, [r4, #20]
 80013ae:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80013b0:	4882      	ldr	r0, [pc, #520]	; (80015bc <UART_SetConfig+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013b2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80013b4:	4028      	ands	r0, r5
 80013b6:	4303      	orrs	r3, r0
 80013b8:	6013      	str	r3, [r2, #0]
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013ba:	6853      	ldr	r3, [r2, #4]
 80013bc:	68e0      	ldr	r0, [r4, #12]
 80013be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013c2:	4303      	orrs	r3, r0
 80013c4:	6053      	str	r3, [r2, #4]
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80013c6:	4b7e      	ldr	r3, [pc, #504]	; (80015c0 <UART_SetConfig+0x224>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80013c8:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80013ca:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 80013cc:	bf1c      	itt	ne
 80013ce:	6a23      	ldrne	r3, [r4, #32]
 80013d0:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80013d2:	6893      	ldr	r3, [r2, #8]
 80013d4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80013d8:	4303      	orrs	r3, r0
 80013da:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013dc:	4b79      	ldr	r3, [pc, #484]	; (80015c4 <UART_SetConfig+0x228>)
 80013de:	429a      	cmp	r2, r3
 80013e0:	d114      	bne.n	800140c <UART_SetConfig+0x70>
 80013e2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80013e6:	4a78      	ldr	r2, [pc, #480]	; (80015c8 <UART_SetConfig+0x22c>)
 80013e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ec:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013f0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80013f4:	5cd3      	ldrb	r3, [r2, r3]
 80013f6:	f040 80aa 	bne.w	800154e <UART_SetConfig+0x1b2>
  {
    switch (clocksource)
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d820      	bhi.n	8001440 <UART_SetConfig+0xa4>
 80013fe:	e8df f003 	tbb	[pc, r3]
 8001402:	8f77      	.short	0x8f77
 8001404:	1f9b1f92 	.word	0x1f9b1f92
 8001408:	1f1f      	.short	0x1f1f
 800140a:	9e          	.byte	0x9e
 800140b:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800140c:	4b6f      	ldr	r3, [pc, #444]	; (80015cc <UART_SetConfig+0x230>)
 800140e:	429a      	cmp	r2, r3
 8001410:	d107      	bne.n	8001422 <UART_SetConfig+0x86>
 8001412:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001416:	4a6e      	ldr	r2, [pc, #440]	; (80015d0 <UART_SetConfig+0x234>)
 8001418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141c:	f003 030c 	and.w	r3, r3, #12
 8001420:	e7e6      	b.n	80013f0 <UART_SetConfig+0x54>
 8001422:	4b67      	ldr	r3, [pc, #412]	; (80015c0 <UART_SetConfig+0x224>)
 8001424:	429a      	cmp	r2, r3
 8001426:	f040 80c2 	bne.w	80015ae <UART_SetConfig+0x212>
 800142a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800142e:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001432:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8001436:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800143a:	d02a      	beq.n	8001492 <UART_SetConfig+0xf6>
 800143c:	d806      	bhi.n	800144c <UART_SetConfig+0xb0>
 800143e:	b315      	cbz	r5, 8001486 <UART_SetConfig+0xea>
        ret = HAL_ERROR;
 8001440:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001442:	2300      	movs	r3, #0
 8001444:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001446:	6663      	str	r3, [r4, #100]	; 0x64
  
  return ret;
}
 8001448:	4610      	mov	r0, r2
 800144a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800144c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001450:	d006      	beq.n	8001460 <UART_SetConfig+0xc4>
 8001452:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8001456:	d1f3      	bne.n	8001440 <UART_SetConfig+0xa4>
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001458:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  UART_GETCLOCKSOURCE(huart, clocksource);
 800145c:	2508      	movs	r5, #8
 800145e:	e001      	b.n	8001464 <UART_SetConfig+0xc8>
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001460:	485c      	ldr	r0, [pc, #368]	; (80015d4 <UART_SetConfig+0x238>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001462:	2502      	movs	r5, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8001464:	6862      	ldr	r2, [r4, #4]
 8001466:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800146a:	4283      	cmp	r3, r0
 800146c:	d8e8      	bhi.n	8001440 <UART_SetConfig+0xa4>
 800146e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001472:	d8e5      	bhi.n	8001440 <UART_SetConfig+0xa4>
        switch (clocksource)
 8001474:	2d08      	cmp	r5, #8
 8001476:	d838      	bhi.n	80014ea <UART_SetConfig+0x14e>
 8001478:	e8df f005 	tbb	[pc, r5]
 800147c:	3726370f 	.word	0x3726370f
 8001480:	3737372e 	.word	0x3737372e
 8001484:	31          	.byte	0x31
 8001485:	00          	.byte	0x00
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001486:	f7ff fd93 	bl	8000fb0 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 800148a:	2800      	cmp	r0, #0
 800148c:	d1ea      	bne.n	8001464 <UART_SetConfig+0xc8>
 800148e:	4602      	mov	r2, r0
 8001490:	e7d7      	b.n	8001442 <UART_SetConfig+0xa6>
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001492:	f7ff fa0d 	bl	80008b0 <HAL_RCC_GetSysClockFreq>
      break;
 8001496:	2504      	movs	r5, #4
 8001498:	e7f7      	b.n	800148a <UART_SetConfig+0xee>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800149a:	f7ff fd89 	bl	8000fb0 <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800149e:	6862      	ldr	r2, [r4, #4]
 80014a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014a4:	0856      	lsrs	r6, r2, #1
 80014a6:	2700      	movs	r7, #0
 80014a8:	fbe1 6700 	umlal	r6, r7, r1, r0
 80014ac:	2300      	movs	r3, #0
 80014ae:	4630      	mov	r0, r6
 80014b0:	4639      	mov	r1, r7
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80014b2:	f7fe fe8b 	bl	80001cc <__aeabi_uldivmod>
          break;
 80014b6:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80014b8:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <UART_SetConfig+0x23c>)
 80014ba:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80014be:	4299      	cmp	r1, r3
 80014c0:	d8be      	bhi.n	8001440 <UART_SetConfig+0xa4>
          huart->Instance->BRR = usartdiv;
 80014c2:	6823      	ldr	r3, [r4, #0]
 80014c4:	60d8      	str	r0, [r3, #12]
 80014c6:	e7bc      	b.n	8001442 <UART_SetConfig+0xa6>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80014c8:	4844      	ldr	r0, [pc, #272]	; (80015dc <UART_SetConfig+0x240>)
 80014ca:	0855      	lsrs	r5, r2, #1
 80014cc:	2300      	movs	r3, #0
 80014ce:	2100      	movs	r1, #0
 80014d0:	1940      	adds	r0, r0, r5
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80014d2:	f141 0100 	adc.w	r1, r1, #0
 80014d6:	e7ec      	b.n	80014b2 <UART_SetConfig+0x116>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80014d8:	f7ff f9ea 	bl	80008b0 <HAL_RCC_GetSysClockFreq>
 80014dc:	e7df      	b.n	800149e <UART_SetConfig+0x102>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80014de:	0850      	lsrs	r0, r2, #1
 80014e0:	2100      	movs	r1, #0
 80014e2:	2300      	movs	r3, #0
 80014e4:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80014e8:	e7f3      	b.n	80014d2 <UART_SetConfig+0x136>
          ret = HAL_ERROR;
 80014ea:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80014ec:	2000      	movs	r0, #0
 80014ee:	e7e3      	b.n	80014b8 <UART_SetConfig+0x11c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80014f0:	f7ff fd5e 	bl	8000fb0 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80014f4:	6861      	ldr	r1, [r4, #4]
 80014f6:	084a      	lsrs	r2, r1, #1
 80014f8:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80014fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001500:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001502:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001504:	f1a3 0010 	sub.w	r0, r3, #16
 8001508:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800150c:	4288      	cmp	r0, r1
 800150e:	d897      	bhi.n	8001440 <UART_SetConfig+0xa4>
      brrtemp = usartdiv & 0xFFF0U;
 8001510:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001514:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001516:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800151a:	430b      	orrs	r3, r1
 800151c:	60c3      	str	r3, [r0, #12]
 800151e:	e790      	b.n	8001442 <UART_SetConfig+0xa6>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001520:	f7ff fd56 	bl	8000fd0 <HAL_RCC_GetPCLK2Freq>
 8001524:	e7e6      	b.n	80014f4 <UART_SetConfig+0x158>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001526:	6860      	ldr	r0, [r4, #4]
 8001528:	0843      	lsrs	r3, r0, #1
 800152a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800152e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001532:	fbb3 f3f0 	udiv	r3, r3, r0
 8001536:	e7e3      	b.n	8001500 <UART_SetConfig+0x164>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001538:	f7ff f9ba 	bl	80008b0 <HAL_RCC_GetSysClockFreq>
 800153c:	e7da      	b.n	80014f4 <UART_SetConfig+0x158>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800153e:	6860      	ldr	r0, [r4, #4]
 8001540:	0843      	lsrs	r3, r0, #1
 8001542:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001546:	e7f4      	b.n	8001532 <UART_SetConfig+0x196>
      ret = HAL_ERROR;
 8001548:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800154a:	2300      	movs	r3, #0
 800154c:	e7da      	b.n	8001504 <UART_SetConfig+0x168>
    switch (clocksource)
 800154e:	2b08      	cmp	r3, #8
 8001550:	d830      	bhi.n	80015b4 <UART_SetConfig+0x218>
 8001552:	e8df f003 	tbb	[pc, r3]
 8001556:	1805      	.short	0x1805
 8001558:	2f242f1b 	.word	0x2f242f1b
 800155c:	2f2f      	.short	0x2f2f
 800155e:	27          	.byte	0x27
 800155f:	00          	.byte	0x00
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001560:	f7ff fd26 	bl	8000fb0 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001564:	6862      	ldr	r2, [r4, #4]
 8001566:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800156a:	fbb3 f3f2 	udiv	r3, r3, r2
 800156e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001570:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001572:	f1a3 0010 	sub.w	r0, r3, #16
 8001576:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800157a:	4288      	cmp	r0, r1
 800157c:	f63f af60 	bhi.w	8001440 <UART_SetConfig+0xa4>
      huart->Instance->BRR = usartdiv;
 8001580:	6821      	ldr	r1, [r4, #0]
 8001582:	60cb      	str	r3, [r1, #12]
 8001584:	e75d      	b.n	8001442 <UART_SetConfig+0xa6>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001586:	f7ff fd23 	bl	8000fd0 <HAL_RCC_GetPCLK2Freq>
 800158a:	e7eb      	b.n	8001564 <UART_SetConfig+0x1c8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800158c:	6860      	ldr	r0, [r4, #4]
 800158e:	0843      	lsrs	r3, r0, #1
 8001590:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001594:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001598:	fbb3 f3f0 	udiv	r3, r3, r0
 800159c:	e7e7      	b.n	800156e <UART_SetConfig+0x1d2>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800159e:	f7ff f987 	bl	80008b0 <HAL_RCC_GetSysClockFreq>
 80015a2:	e7df      	b.n	8001564 <UART_SetConfig+0x1c8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80015a4:	6860      	ldr	r0, [r4, #4]
 80015a6:	0843      	lsrs	r3, r0, #1
 80015a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015ac:	e7f4      	b.n	8001598 <UART_SetConfig+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015ae:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80015b2:	d0c9      	beq.n	8001548 <UART_SetConfig+0x1ac>
      ret = HAL_ERROR;
 80015b4:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e7db      	b.n	8001572 <UART_SetConfig+0x1d6>
 80015ba:	bf00      	nop
 80015bc:	efff69f3 	.word	0xefff69f3
 80015c0:	40008000 	.word	0x40008000
 80015c4:	40013800 	.word	0x40013800
 80015c8:	08001bbc 	.word	0x08001bbc
 80015cc:	40004400 	.word	0x40004400
 80015d0:	08001bc0 	.word	0x08001bc0
 80015d4:	00f42400 	.word	0x00f42400
 80015d8:	000ffcff 	.word	0x000ffcff
 80015dc:	f4240000 	.word	0xf4240000

080015e0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80015e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80015e2:	07da      	lsls	r2, r3, #31
{
 80015e4:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80015e6:	d506      	bpl.n	80015f6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80015e8:	6801      	ldr	r1, [r0, #0]
 80015ea:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80015ec:	684a      	ldr	r2, [r1, #4]
 80015ee:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80015f2:	4322      	orrs	r2, r4
 80015f4:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80015f6:	079c      	lsls	r4, r3, #30
 80015f8:	d506      	bpl.n	8001608 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80015fa:	6801      	ldr	r1, [r0, #0]
 80015fc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80015fe:	684a      	ldr	r2, [r1, #4]
 8001600:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001604:	4322      	orrs	r2, r4
 8001606:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001608:	0759      	lsls	r1, r3, #29
 800160a:	d506      	bpl.n	800161a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800160c:	6801      	ldr	r1, [r0, #0]
 800160e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001610:	684a      	ldr	r2, [r1, #4]
 8001612:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001616:	4322      	orrs	r2, r4
 8001618:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800161a:	071a      	lsls	r2, r3, #28
 800161c:	d506      	bpl.n	800162c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800161e:	6801      	ldr	r1, [r0, #0]
 8001620:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001622:	684a      	ldr	r2, [r1, #4]
 8001624:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001628:	4322      	orrs	r2, r4
 800162a:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800162c:	06dc      	lsls	r4, r3, #27
 800162e:	d506      	bpl.n	800163e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001630:	6801      	ldr	r1, [r0, #0]
 8001632:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001634:	688a      	ldr	r2, [r1, #8]
 8001636:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800163a:	4322      	orrs	r2, r4
 800163c:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800163e:	0699      	lsls	r1, r3, #26
 8001640:	d506      	bpl.n	8001650 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001642:	6801      	ldr	r1, [r0, #0]
 8001644:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001646:	688a      	ldr	r2, [r1, #8]
 8001648:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800164c:	4322      	orrs	r2, r4
 800164e:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001650:	065a      	lsls	r2, r3, #25
 8001652:	d50f      	bpl.n	8001674 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001654:	6801      	ldr	r1, [r0, #0]
 8001656:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001658:	684a      	ldr	r2, [r1, #4]
 800165a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800165e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001660:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001664:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001666:	d105      	bne.n	8001674 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001668:	684a      	ldr	r2, [r1, #4]
 800166a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800166c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001670:	4322      	orrs	r2, r4
 8001672:	604a      	str	r2, [r1, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001674:	061b      	lsls	r3, r3, #24
 8001676:	d506      	bpl.n	8001686 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001678:	6802      	ldr	r2, [r0, #0]
 800167a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800167c:	6853      	ldr	r3, [r2, #4]
 800167e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001682:	430b      	orrs	r3, r1
 8001684:	6053      	str	r3, [r2, #4]
 8001686:	bd10      	pop	{r4, pc}

08001688 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800168c:	9d06      	ldr	r5, [sp, #24]
 800168e:	4604      	mov	r4, r0
 8001690:	460f      	mov	r7, r1
 8001692:	4616      	mov	r6, r2
 8001694:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001696:	6821      	ldr	r1, [r4, #0]
 8001698:	69ca      	ldr	r2, [r1, #28]
 800169a:	ea37 0302 	bics.w	r3, r7, r2
 800169e:	bf0c      	ite	eq
 80016a0:	2201      	moveq	r2, #1
 80016a2:	2200      	movne	r2, #0
 80016a4:	42b2      	cmp	r2, r6
 80016a6:	d002      	beq.n	80016ae <UART_WaitOnFlagUntilTimeout+0x26>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80016a8:	2000      	movs	r0, #0
}
 80016aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80016ae:	1c6b      	adds	r3, r5, #1
 80016b0:	d0f2      	beq.n	8001698 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80016b2:	b99d      	cbnz	r5, 80016dc <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80016b4:	6823      	ldr	r3, [r4, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80016bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	f022 0201 	bic.w	r2, r2, #1
 80016c4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80016c6:	2320      	movs	r3, #32
 80016c8:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80016cc:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 80016d0:	2300      	movs	r3, #0
 80016d2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80016d6:	2003      	movs	r0, #3
 80016d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80016dc:	f7fe ff26 	bl	800052c <HAL_GetTick>
 80016e0:	eba0 0008 	sub.w	r0, r0, r8
 80016e4:	4285      	cmp	r5, r0
 80016e6:	d2d6      	bcs.n	8001696 <UART_WaitOnFlagUntilTimeout+0xe>
 80016e8:	e7e4      	b.n	80016b4 <UART_WaitOnFlagUntilTimeout+0x2c>

080016ea <UART_CheckIdleState>:
{
 80016ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80016ec:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016ee:	2600      	movs	r6, #0
 80016f0:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 80016f2:	f7fe ff1b 	bl	800052c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80016f6:	6823      	ldr	r3, [r4, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80016fc:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80016fe:	d417      	bmi.n	8001730 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001700:	6823      	ldr	r3, [r4, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	075b      	lsls	r3, r3, #29
 8001706:	d50a      	bpl.n	800171e <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001708:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	2200      	movs	r2, #0
 8001710:	462b      	mov	r3, r5
 8001712:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001716:	4620      	mov	r0, r4
 8001718:	f7ff ffb6 	bl	8001688 <UART_WaitOnFlagUntilTimeout>
 800171c:	b9a0      	cbnz	r0, 8001748 <UART_CheckIdleState+0x5e>
  huart->gState= HAL_UART_STATE_READY;
 800171e:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001720:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001722:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8001726:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState= HAL_UART_STATE_READY;
 800172a:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 800172e:	e00c      	b.n	800174a <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001730:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	4632      	mov	r2, r6
 8001738:	4603      	mov	r3, r0
 800173a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800173e:	4620      	mov	r0, r4
 8001740:	f7ff ffa2 	bl	8001688 <UART_WaitOnFlagUntilTimeout>
 8001744:	2800      	cmp	r0, #0
 8001746:	d0db      	beq.n	8001700 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001748:	2003      	movs	r0, #3
}
 800174a:	b002      	add	sp, #8
 800174c:	bd70      	pop	{r4, r5, r6, pc}

0800174e <HAL_UART_Init>:
{
 800174e:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001750:	4604      	mov	r4, r0
 8001752:	b360      	cbz	r0, 80017ae <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001754:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001758:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800175c:	b91b      	cbnz	r3, 8001766 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800175e:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001762:	f000 f975 	bl	8001a50 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001766:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001768:	2324      	movs	r3, #36	; 0x24
 800176a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 800176e:	6813      	ldr	r3, [r2, #0]
 8001770:	f023 0301 	bic.w	r3, r3, #1
 8001774:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001776:	4620      	mov	r0, r4
 8001778:	f7ff fe10 	bl	800139c <UART_SetConfig>
 800177c:	2801      	cmp	r0, #1
 800177e:	d016      	beq.n	80017ae <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001782:	b113      	cbz	r3, 800178a <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001784:	4620      	mov	r0, r4
 8001786:	f7ff ff2b 	bl	80015e0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800178a:	6823      	ldr	r3, [r4, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800179a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80017a2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80017a4:	601a      	str	r2, [r3, #0]
}
 80017a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80017aa:	f7ff bf9e 	b.w	80016ea <UART_CheckIdleState>
}
 80017ae:	2001      	movs	r0, #1
 80017b0:	bd10      	pop	{r4, pc}
	...

080017b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b4:	b530      	push	{r4, r5, lr}
 80017b6:	b0ad      	sub	sp, #180	; 0xb4
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability 
    */
  HAL_PWR_EnableBkUpAccess();
 80017b8:	f7fe fff4 	bl	80007a4 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80017bc:	4a27      	ldr	r2, [pc, #156]	; (800185c <SystemClock_Config+0xa8>)
 80017be:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80017c2:	f023 0318 	bic.w	r3, r3, #24
 80017c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80017ca:	2314      	movs	r3, #20
 80017cc:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017d2:	2360      	movs	r3, #96	; 0x60
 80017d4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 16;
 80017d6:	2310      	movs	r3, #16
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017d8:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017da:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 16;
 80017dc:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017de:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017e0:	2307      	movs	r3, #7
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017e2:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017e4:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e6:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80017e8:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017ea:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017ec:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017ee:	9515      	str	r5, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017f0:	9516      	str	r5, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f2:	f7ff f8c5 	bl	8000980 <HAL_RCC_OscConfig>
 80017f6:	b100      	cbz	r0, 80017fa <SystemClock_Config+0x46>
 80017f8:	e7fe      	b.n	80017f8 <SystemClock_Config+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017fa:	230f      	movs	r3, #15
 80017fc:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fe:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001800:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001802:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001804:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001806:	4621      	mov	r1, r4
 8001808:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800180a:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800180c:	f7ff fb14 	bl	8000e38 <HAL_RCC_ClockConfig>
 8001810:	b100      	cbz	r0, 8001814 <SystemClock_Config+0x60>
 8001812:	e7fe      	b.n	8001812 <SystemClock_Config+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001814:	9020      	str	r0, [sp, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001816:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001818:	9517      	str	r5, [sp, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800181a:	f7ff fc75 	bl	8001108 <HAL_RCCEx_PeriphCLKConfig>
 800181e:	b100      	cbz	r0, 8001822 <SystemClock_Config+0x6e>
 8001820:	e7fe      	b.n	8001820 <SystemClock_Config+0x6c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001822:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001826:	f7fe ffcd 	bl	80007c4 <HAL_PWREx_ControlVoltageScaling>
 800182a:	4604      	mov	r4, r0
 800182c:	b100      	cbz	r0, 8001830 <SystemClock_Config+0x7c>
 800182e:	e7fe      	b.n	800182e <SystemClock_Config+0x7a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001830:	f7ff fbb8 	bl	8000fa4 <HAL_RCC_GetHCLKFreq>
 8001834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001838:	fbb0 f0f3 	udiv	r0, r0, r3
 800183c:	f7fe fed0 	bl	80005e0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001840:	2004      	movs	r0, #4
 8001842:	f7fe fee3 	bl	800060c <HAL_SYSTICK_CLKSourceConfig>

    /**Enable MSI Auto calibration 
    */
  HAL_RCCEx_EnableMSIPLLMode();
 8001846:	f7ff fda1 	bl	800138c <HAL_RCCEx_EnableMSIPLLMode>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800184a:	4622      	mov	r2, r4
 800184c:	4621      	mov	r1, r4
 800184e:	f04f 30ff 	mov.w	r0, #4294967295
 8001852:	f7fe fe91 	bl	8000578 <HAL_NVIC_SetPriority>
}
 8001856:	b02d      	add	sp, #180	; 0xb4
 8001858:	bd30      	pop	{r4, r5, pc}
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000

08001860 <main>:
{
 8001860:	b500      	push	{lr}
 8001862:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8001864:	f7fe fe4e 	bl	8000504 <HAL_Init>
  SystemClock_Config();
 8001868:	f7ff ffa4 	bl	80017b4 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186c:	4b51      	ldr	r3, [pc, #324]	; (80019b4 <main+0x154>)
 800186e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001870:	f042 0204 	orr.w	r2, r2, #4
 8001874:	64da      	str	r2, [r3, #76]	; 0x4c
 8001876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001878:	f002 0204 	and.w	r2, r2, #4
 800187c:	9200      	str	r2, [sp, #0]
 800187e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001880:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001882:	f042 0201 	orr.w	r2, r2, #1
 8001886:	64da      	str	r2, [r3, #76]	; 0x4c
 8001888:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800188a:	f002 0201 	and.w	r2, r2, #1
 800188e:	9201      	str	r2, [sp, #4]
 8001890:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001894:	f042 0202 	orr.w	r2, r2, #2
 8001898:	64da      	str	r2, [r3, #76]	; 0x4c
 800189a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	9302      	str	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED4_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80018a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ac:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, LED4_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80018ae:	f7fe ff73 	bl	8000798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2108      	movs	r1, #8
 80018b6:	4840      	ldr	r0, [pc, #256]	; (80019b8 <main+0x158>)
 80018b8:	f7fe ff6e 	bl	8000798 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED4_Pin LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin;
 80018be:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	a903      	add	r1, sp, #12
 80018c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin;
 80018ca:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018cc:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	f7fe fead 	bl	8000630 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80018d6:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80018d8:	a903      	add	r1, sp, #12
 80018da:	4837      	ldr	r0, [pc, #220]	; (80019b8 <main+0x158>)
  GPIO_InitStruct.Pin = LED1_Pin;
 80018dc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f7fe fea4 	bl	8000630 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80018e8:	4834      	ldr	r0, [pc, #208]	; (80019bc <main+0x15c>)
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 80018ea:	4935      	ldr	r1, [pc, #212]	; (80019c0 <main+0x160>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018ec:	60c4      	str	r4, [r0, #12]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 80018ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80018f2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018fa:	230c      	movs	r3, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 80018fc:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018fe:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001900:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001902:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001904:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001906:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001908:	f7ff ff21 	bl	800174e <HAL_UART_Init>
 800190c:	b100      	cbz	r0, 8001910 <main+0xb0>
 800190e:	e7fe      	b.n	800190e <main+0xae>
	  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,1);
 8001910:	2201      	movs	r2, #1
 8001912:	2108      	movs	r1, #8
 8001914:	4828      	ldr	r0, [pc, #160]	; (80019b8 <main+0x158>)
 8001916:	f7fe ff3f 	bl	8000798 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,LED2_Pin,1);
 800191a:	2201      	movs	r2, #1
 800191c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001924:	f7fe ff38 	bl	8000798 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,LED3_Pin,0);
 8001928:	2200      	movs	r2, #0
 800192a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800192e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001932:	f7fe ff31 	bl	8000798 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,LED4_Pin,0);
 8001936:	2200      	movs	r2, #0
 8001938:	f44f 7180 	mov.w	r1, #256	; 0x100
 800193c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001940:	f7fe ff2a 	bl	8000798 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8001944:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001948:	f7fe fdf6 	bl	8000538 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA,LED2_Pin,0);
 800194c:	2200      	movs	r2, #0
 800194e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001956:	f7fe ff1f 	bl	8000798 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,LED3_Pin,1);
 800195a:	2201      	movs	r2, #1
 800195c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001964:	f7fe ff18 	bl	8000798 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,LED4_Pin,0);
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800196e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001972:	f7fe ff11 	bl	8000798 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8001976:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800197a:	f7fe fddd 	bl	8000538 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA,LED2_Pin,0);
 800197e:	2200      	movs	r2, #0
 8001980:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001988:	f7fe ff06 	bl	8000798 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,LED3_Pin,0);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001996:	f7fe feff 	bl	8000798 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,LED4_Pin,1);
 800199a:	2201      	movs	r2, #1
 800199c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a4:	f7fe fef8 	bl	8000798 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80019a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019ac:	f7fe fdc4 	bl	8000538 <HAL_Delay>
 80019b0:	e7ae      	b.n	8001910 <main+0xb0>
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000
 80019b8:	48000400 	.word	0x48000400
 80019bc:	20000024 	.word	0x20000024
 80019c0:	40004400 	.word	0x40004400

080019c4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c4:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <HAL_MspInit+0x88>)
{
 80019c6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019ca:	f042 0201 	orr.w	r2, r2, #1
 80019ce:	661a      	str	r2, [r3, #96]	; 0x60
 80019d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019d2:	f002 0201 	and.w	r2, r2, #1
 80019d6:	9200      	str	r2, [sp, #0]
 80019d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019e0:	659a      	str	r2, [r3, #88]	; 0x58
 80019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e8:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ea:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ec:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ee:	f7fe fdb1 	bl	8000554 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	4611      	mov	r1, r2
 80019f6:	f06f 000b 	mvn.w	r0, #11
 80019fa:	f7fe fdbd 	bl	8000578 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	4611      	mov	r1, r2
 8001a02:	f06f 000a 	mvn.w	r0, #10
 8001a06:	f7fe fdb7 	bl	8000578 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	f06f 0009 	mvn.w	r0, #9
 8001a12:	f7fe fdb1 	bl	8000578 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	4611      	mov	r1, r2
 8001a1a:	f06f 0004 	mvn.w	r0, #4
 8001a1e:	f7fe fdab 	bl	8000578 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	4611      	mov	r1, r2
 8001a26:	f06f 0003 	mvn.w	r0, #3
 8001a2a:	f7fe fda5 	bl	8000578 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	4611      	mov	r1, r2
 8001a32:	f06f 0001 	mvn.w	r0, #1
 8001a36:	f7fe fd9f 	bl	8000578 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a42:	f7fe fd99 	bl	8000578 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a46:	b003      	add	sp, #12
 8001a48:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a4c:	40021000 	.word	0x40021000

08001a50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a50:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8001a52:	6802      	ldr	r2, [r0, #0]
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <HAL_UART_MspInit+0x5c>)
 8001a56:	429a      	cmp	r2, r3
{
 8001a58:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 8001a5a:	d125      	bne.n	8001aa8 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a5c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a60:	2403      	movs	r4, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a62:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a64:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001a68:	659a      	str	r2, [r3, #88]	; 0x58
 8001a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	9404      	str	r4, [sp, #16]
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001a76:	2304      	movs	r3, #4
 8001a78:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a7c:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2500      	movs	r5, #0
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001a80:	a901      	add	r1, sp, #4
 8001a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a86:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f7fe fdd0 	bl	8000630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001a94:	a901      	add	r1, sp, #4
 8001a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001a9a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001aa2:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	f7fe fdc4 	bl	8000630 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001aa8:	b006      	add	sp, #24
 8001aaa:	bd70      	pop	{r4, r5, r6, pc}
 8001aac:	40004400 	.word	0x40004400

08001ab0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001ab0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab2:	f7fe fd33 	bl	800051c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001aba:	f7fe bdb4 	b.w	8000626 <HAL_SYSTICK_IRQHandler>
	...

08001ac0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ac0:	490f      	ldr	r1, [pc, #60]	; (8001b00 <SystemInit+0x40>)
 8001ac2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001ac6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <SystemInit+0x44>)
 8001ad0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ad2:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8001ad4:	f042 0201 	orr.w	r2, r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8001ada:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001ae2:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001ae6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001ae8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001af4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001af6:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001af8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001afc:	608b      	str	r3, [r1, #8]
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00
 8001b04:	40021000 	.word	0x40021000

08001b08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b40 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b0c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b0e:	e003      	b.n	8001b18 <LoopCopyDataInit>

08001b10 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b12:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b14:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b16:	3104      	adds	r1, #4

08001b18 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b18:	480b      	ldr	r0, [pc, #44]	; (8001b48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b1c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b1e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b20:	d3f6      	bcc.n	8001b10 <CopyDataInit>
	ldr	r2, =_sbss
 8001b22:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b24:	e002      	b.n	8001b2c <LoopFillZerobss>

08001b26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b26:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b28:	f842 3b04 	str.w	r3, [r2], #4

08001b2c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <LoopForever+0x16>)
	cmp	r2, r3
 8001b2e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b30:	d3f9      	bcc.n	8001b26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b32:	f7ff ffc5 	bl	8001ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b36:	f000 f811 	bl	8001b5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b3a:	f7ff fe91 	bl	8001860 <main>

08001b3e <LoopForever>:

LoopForever:
    b LoopForever
 8001b3e:	e7fe      	b.n	8001b3e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b40:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001b44:	08001c28 	.word	0x08001c28
	ldr	r0, =_sdata
 8001b48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b4c:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8001b50:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8001b54:	2000009c 	.word	0x2000009c

08001b58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC1_IRQHandler>
	...

08001b5c <__libc_init_array>:
 8001b5c:	b570      	push	{r4, r5, r6, lr}
 8001b5e:	4e0d      	ldr	r6, [pc, #52]	; (8001b94 <__libc_init_array+0x38>)
 8001b60:	4c0d      	ldr	r4, [pc, #52]	; (8001b98 <__libc_init_array+0x3c>)
 8001b62:	1ba4      	subs	r4, r4, r6
 8001b64:	10a4      	asrs	r4, r4, #2
 8001b66:	2500      	movs	r5, #0
 8001b68:	42a5      	cmp	r5, r4
 8001b6a:	d109      	bne.n	8001b80 <__libc_init_array+0x24>
 8001b6c:	4e0b      	ldr	r6, [pc, #44]	; (8001b9c <__libc_init_array+0x40>)
 8001b6e:	4c0c      	ldr	r4, [pc, #48]	; (8001ba0 <__libc_init_array+0x44>)
 8001b70:	f000 f818 	bl	8001ba4 <_init>
 8001b74:	1ba4      	subs	r4, r4, r6
 8001b76:	10a4      	asrs	r4, r4, #2
 8001b78:	2500      	movs	r5, #0
 8001b7a:	42a5      	cmp	r5, r4
 8001b7c:	d105      	bne.n	8001b8a <__libc_init_array+0x2e>
 8001b7e:	bd70      	pop	{r4, r5, r6, pc}
 8001b80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b84:	4798      	blx	r3
 8001b86:	3501      	adds	r5, #1
 8001b88:	e7ee      	b.n	8001b68 <__libc_init_array+0xc>
 8001b8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b8e:	4798      	blx	r3
 8001b90:	3501      	adds	r5, #1
 8001b92:	e7f2      	b.n	8001b7a <__libc_init_array+0x1e>
 8001b94:	08001c20 	.word	0x08001c20
 8001b98:	08001c20 	.word	0x08001c20
 8001b9c:	08001c20 	.word	0x08001c20
 8001ba0:	08001c24 	.word	0x08001c24

08001ba4 <_init>:
 8001ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ba6:	bf00      	nop
 8001ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001baa:	bc08      	pop	{r3}
 8001bac:	469e      	mov	lr, r3
 8001bae:	4770      	bx	lr

08001bb0 <_fini>:
 8001bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb2:	bf00      	nop
 8001bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bb6:	bc08      	pop	{r3}
 8001bb8:	469e      	mov	lr, r3
 8001bba:	4770      	bx	lr
